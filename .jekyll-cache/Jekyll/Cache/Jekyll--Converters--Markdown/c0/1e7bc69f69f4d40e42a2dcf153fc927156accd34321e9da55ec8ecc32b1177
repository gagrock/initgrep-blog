I"V—<h2 id="side-effects">Side-effects</h2>

<p>A <a href="http://en.wikipedia.org/wiki/Side_effect_%28computer_science%29">side effect</a> refers simply to the modification of some kind of state - for instance:</p>

<ul>
  <li>
    <p><em>Changing the value of a variable;</em></p>
  </li>
  <li>
    <p><em>Writing some data to disk;</em></p>
  </li>
  <li>
    <p><em>Enabling or disabling a button in the User Interface.</em></p>
  </li>
</ul>

<p>â€¦<a href="https://softwareengineering.stackexchange.com/questions/40297/what-is-a-side-effect">source</a></p>

<p>Â </p>

<p>It is recommended to keep components as pure as possible. A pure component has an immutable input and produces the events as output. These components are essentially dumb and most of the computations are done outside of it. A pure component has a single responsibility similar to <em>pure functions</em>.</p>

<p>Now, If the components are not doing any computations, most of the computations and side-effects would be moved inside the services. That is the first-hand use of angular services. It is easy to inject them into components and perform various computations.</p>

<p>Now here are a few things you should consider -</p>

<ul>
  <li>
    <p>First of all, if your application is growing fast and you are storing/managing state inside your components or services, you should consider a state management solution.</p>
  </li>
  <li>
    <p>The services are an ideal choice but you have to manually take care of storing the state, making sure the state remains immutable, consistent, and available for all the dependent components as well as services.</p>
  </li>
  <li>
    <p>Letâ€™s assume, you have a service taking care of communicating via APIs to some remote server. You inject the service in a component and call the method of the service inside the component.</p>
  </li>
  <li>
    <p>â€¦and if  you have another service, which performs some computation which is supposed to be run when the user interacts with UI such as a click of a button. Again, you would inject the service in component, and on <code class="language-plaintext highlighter-rouge">click</code> of the button, a method of the service is called.</p>
  </li>
</ul>

<p>It works greatâ€¦ But if you notice, the component is tighly coupled with the service  and it knows about what operations to perform when a user clicks a button or when an API should be called.</p>

<p>The very first disadvantage of this pattern you would come across is components are hard to test since they are dependent on many services. You would also notice that It is almost impossible to reuse the components.</p>

<p><strong><em>So what is the alternative approach?</em></strong></p>

<p>The alternative approach is to let components be pure and not responsible for managing the state or performing the unwanted computations. Instead make them reactive so that when an input data is available, it renders it to UI and when there are UI interactions, it generates the relevant Events.</p>

<p>That is itâ€¦</p>

<p>The component does not have to know, how the Input data is made available or how the events are handled.</p>

<p><strong>The services are nevertheless an important part of the application. They still contain all the methods to do various computations or communicate via APIs. But now the services are no longer being injected inside the component.</strong></p>

<p>I have already written a post about <a href="/posts/javascript/angular/state-management-in-angualar-using-ngrx"> reactive state management using NgRx store, actions, and selectors.</a> You can go through it to have an understanding of NgRx state management.</p>

<p>We discussed the service based approach above. Letâ€™s see a comparison between the service based design and Implementing NgRx effects. You might notice fewer elements in play during service based design but donâ€™t let it fool you. It is better to have create more elements than to have a lousy app.</p>

<h3 id="service-based-design">Service based design</h3>

<p>Suppose, our <code class="language-plaintext highlighter-rouge">AppComponent </code>requires a list of users.</p>

<ul>
  <li>
    <p>We have a service <code class="language-plaintext highlighter-rouge">AppRemoteService</code>  and it contains  <code class="language-plaintext highlighter-rouge">users$ observable</code>  which can be subscribed to get a list of users.</p>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">users$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">httpClient</span><span class="p">.</span><span class="kd">get</span><span class="o">&lt;</span><span class="nx">User</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">URL</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">take</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>We have injected the <code class="language-plaintext highlighter-rouge">AppRemoteService</code> in side the <code class="language-plaintext highlighter-rouge">AppComponent</code> and we would subscribe to <code class="language-plaintext highlighter-rouge">AppRemoteService.users$</code> observable .</p>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
    <span class="na">template</span><span class="p">:</span> <span class="s2">`
    &lt;div class="user-container" 
    Â Â Â Â *ngIf="localUsers"&gt;
Â Â Â Â  &lt;app-user *ngfor="let user of localUsers" 
                [inputUser]="user"&gt;
Â Â Â Â &lt;/div&gt;
    `</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">AppComponent</span><span class="p">{</span>
<span class="c1">//state inside component</span>
<span class="nl">localUsers</span><span class="p">:</span> <span class="nx">User</span><span class="p">[];</span>
  
<span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">remoteService</span><span class="p">:</span> <span class="nx">RemoteService</span><span class="p">){}</span>
  
  <span class="nx">ngOnInit</span><span class="p">(){</span>
      <span class="c1">//handle the subscription here</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">remoteService</span><span class="p">.</span><span class="nx">users$</span><span class="p">.</span><span class="nx">subscrible</span><span class="p">(</span>
      <span class="nx">users</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">localUsers</span> <span class="o">=</span> <span class="nx">users</span><span class="p">;</span>
      <span class="p">);</span>
  <span class="p">}</span>
  <span class="p">}</span> 
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="ngrx-effects-based-design">NgRx Effects based design</h3>

<p>Here is how NgRx effects will change it:-</p>

<ul>
  <li>
    <p>The AppComponent would only require <code class="language-plaintext highlighter-rouge">NgRx Store</code> to select the <code class="language-plaintext highlighter-rouge">state</code> or dispatch <code class="language-plaintext highlighter-rouge">actions</code>.</p>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">class</span> <span class="nx">AppComponent</span> <span class="k">implements</span> <span class="nx">OnInit</span> <span class="p">{</span>
 <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">store</span><span class="p">:</span> <span class="nx">Store</span><span class="o">&lt;</span><span class="nx">fromApp</span><span class="p">.</span><span class="nx">AppState</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
 <span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>As soon as the component requires the list of users, it would dispatch an action <code class="language-plaintext highlighter-rouge">loadUsers</code> when the component is initialized.</p>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">class</span> <span class="nx">AppComponent</span> <span class="k">implements</span> <span class="nx">OnInit</span> <span class="p">{</span>
 <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">store</span><span class="p">:</span> <span class="nx">Store</span><span class="o">&lt;</span><span class="nx">fromApp</span><span class="p">.</span><span class="nx">AppState</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
  
 <span class="nx">ngOnInit</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
     <span class="c1">//action dispatched</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">fromActions</span><span class="p">.</span><span class="nx">loadUsers</span><span class="p">());</span>
 <span class="p">}</span>
  
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>The Component will use <strong>NgRx selector</strong> <code class="language-plaintext highlighter-rouge">selectUsers</code> and subscribe to its observable.</p>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  
<span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
 <span class="na">template</span><span class="p">:</span> <span class="s2">`
     &lt;div class="user-container" 
     Â Â Â Â *ngIf="localUsers$ | async as users"&gt;
         &lt;app-user *ngfor="let user of users" 
                    [inputUser]="user"&gt;
Â Â Â Â  &lt;/div&gt;
 `</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">AppComponent</span> <span class="k">implements</span> <span class="nx">OnInit</span> <span class="p">{</span>
  <span class="nx">localusers$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="nx">fromSelectors</span><span class="p">.</span><span class="nx">selectUsers</span><span class="p">);</span>
  
  <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">store</span><span class="p">:</span> <span class="nx">Store</span><span class="o">&lt;</span><span class="nx">fromApp</span><span class="p">.</span><span class="nx">AppState</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
  
  <span class="nx">ngOnInit</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">fromActions</span><span class="p">.</span><span class="nx">loadUsers</span><span class="p">());</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>NgRx Effects</strong> will be listening to the stream of actions dispatched since the latest state change. <code class="language-plaintext highlighter-rouge">loadUsers$</code> effect is interested in <code class="language-plaintext highlighter-rouge">loadUsers</code> action dispatched by <code class="language-plaintext highlighter-rouge">AppComponent</code>. As such, when the component is initialized, the <code class="language-plaintext highlighter-rouge">loadUsers</code> action is dispatched. The effect reacts to it and subscribes <code class="language-plaintext highlighter-rouge">remoteservice.users$</code> .</p>
  </li>
  <li>
    <p>Once the data is fetched, the <code class="language-plaintext highlighter-rouge">loadUsers$</code> effect will dispatch <code class="language-plaintext highlighter-rouge">addUsers</code> action with associated metadata - users. The respective reducer function will transition the state. The latest state will contain recently feteched users.</p>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//app.effects.ts</span>
 <span class="nx">loadUsers$</span> <span class="o">=</span> <span class="nx">createEffect</span><span class="p">(</span>
    <span class="p">()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">action$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
        <span class="nx">ofType</span><span class="p">(</span><span class="nx">AppActions</span><span class="p">.</span><span class="nx">loadUsers</span><span class="p">),</span>
        <span class="nx">mergeMap</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">remoteService</span><span class="p">.</span><span class="nx">users$</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
            <span class="nx">map</span><span class="p">(</span><span class="nx">users</span> <span class="o">=&gt;</span> <span class="nx">AppActions</span><span class="p">.</span><span class="nx">addUsers</span><span class="p">({</span> <span class="nx">users</span> <span class="p">})),</span>
            <span class="nx">catchError</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">of</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
            <span class="p">})</span>
        <span class="p">)),</span>
 <span class="p">));</span>
</code></pre></div>    </div>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  
<span class="c1">//app.reducer.ts</span>
<span class="c1">//addUsers action mapping </span>
  
<span class="kd">const</span> <span class="nx">theReducer</span> <span class="o">=</span> <span class="nx">createReducer</span><span class="p">(</span>
  <span class="nx">initialState</span><span class="p">,</span>
  <span class="nx">on</span><span class="p">(</span><span class="nx">AppActions</span><span class="p">.</span><span class="nx">addUsers</span><span class="p">,</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="p">{</span> <span class="nx">users</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="p">...</span><span class="nx">state</span><span class="p">,</span>
    <span class="na">users</span><span class="p">:</span> <span class="p">[...</span><span class="nx">users</span><span class="p">]</span>
  <span class="p">}))</span>
  
<span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>As soon as the data is available, the <code class="language-plaintext highlighter-rouge">localusers$</code> observable subsrciption will have users list ready for the component to render.</p>
  </li>
</ul>

<p>Compared to service based approach, isolating the side-effects using NgRx Effects, the component is not dependent on a service. Neither is it concerned how the data is loaded. Besides allowing the component to be pure, It will also make testing components easier and will increase the chances of reusability.</p>

<h2 id="ngrx-effects">NgRx Effects</h2>

<p>NgRx Effects are injectable services similar to Angular services. These services are long running and listen to an observable stream of <em>all</em> Actions dispatched. If the effect is interested in any action , it  performs a task(side-effects) and return another Action back to Action Stream.</p>

<blockquote>
  <p><em>NgRx Effects may not always dispatch a new action upon completion of a side-effect.</em></p>
</blockquote>

<h2 id="installation">Installation</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># angular CLI 6+</span>
ng add @ngrx/effects@latest
<span class="c"># &lt; 6</span>
npm <span class="nb">install</span> @ngrx/effects <span class="nt">--save</span>
</code></pre></div></div>

<p>Below is the service which contains methods for fetching data via APIâ€™s.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//app-remote.service.ts</span>

<span class="kd">const</span> <span class="nx">USERS_PATH</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">https://jsonplaceholder.typicode.com/users</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">POSTS_PATH</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">https://jsonplaceholder.typicode.com/posts</span><span class="dl">'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Injectable</span><span class="p">({</span>
  <span class="na">providedIn</span><span class="p">:</span> <span class="dl">'</span><span class="s1">root</span><span class="dl">'</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">AppRemoteService</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">httpClient</span><span class="p">:</span> <span class="nx">HttpClient</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>

  <span class="cm">/** 1) - fetch users from the remote server */</span>
  <span class="nx">users$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">httpClient</span><span class="p">.</span><span class="kd">get</span><span class="o">&lt;</span><span class="nx">User</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">USERS_PATH</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">take</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>

  <span class="cm">/** 2) - fetch posts from the remote server */</span>
  <span class="nx">posts$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">httpClient</span><span class="p">.</span><span class="kd">get</span><span class="o">&lt;</span><span class="nx">Post</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">POSTS_PATH</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">take</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>

<span class="p">}</span>
</code></pre></div></div>

<h2 id="implementation">Implementation</h2>

<ul>
  <li>
    <p>We would require an injectable service for create effects. Letâ€™s go ahead and create an <code class="language-plaintext highlighter-rouge">Effect</code> service, name it <code class="language-plaintext highlighter-rouge">AppEffects</code>   and make it injectable using <code class="language-plaintext highlighter-rouge">@Injectable</code> decorator.</p>
  </li>
  <li>
    <p>NgRx Effects listens to an Observable Action stream dispatched since the latest state change and it provided by <code class="language-plaintext highlighter-rouge">Actions</code> service. Letâ€™s inject an instance of  <code class="language-plaintext highlighter-rouge">Actions</code> service in our AppEffects service.</p>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Actions</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@ngrx/effects/</span><span class="dl">'</span><span class="p">;</span>
  
<span class="p">@</span><span class="nd">Injectable</span><span class="p">()</span>
  
  <span class="k">export</span> <span class="kd">class</span> <span class="nx">AppEffects</span><span class="p">{</span>
      <span class="kd">constructor</span><span class="p">(</span> <span class="k">private</span> <span class="nx">action$</span><span class="p">:</span> <span class="nx">Actions</span><span class="p">){}</span>
 <span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>The sole purpose of NgRx Effects is to isolate the side-effects from components. Instead of directly calling side-effects inside components, we would now call them in NgRx effects. As such, other services can also be injected into <code class="language-plaintext highlighter-rouge">AppEffect</code> service. These services can be used to interact with external apis or perfrom computations. We will inject our <code class="language-plaintext highlighter-rouge">AppRemoteService</code> which contains methods to fetch data via APIs.</p>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Actions</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@ngrx/effects/</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">AppRemoteService</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../app-remote.service</span><span class="dl">'</span><span class="p">;</span>
  
<span class="p">@</span><span class="nd">Injectable</span><span class="p">()</span>
 <span class="k">export</span> <span class="kd">class</span> <span class="nx">AppEffects</span><span class="p">{</span>
  
<span class="err">Â Â Â Â </span><span class="kd">constructor</span><span class="p">(</span> 
<span class="err">Â Â Â Â Â Â Â Â </span><span class="k">private</span> <span class="nx">action$</span><span class="p">:</span> <span class="nx">Actions</span><span class="p">,</span>
<span class="err">Â Â Â Â </span>    <span class="k">private</span> <span class="nx">remoteService</span><span class="p">:</span> <span class="nx">AppRemoteService</span>
<span class="err">Â Â Â Â </span>  <span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
<span class="err">Â Â Â Â </span>  
  
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>Inside the AppEffects service, The <code class="language-plaintext highlighter-rouge">createEffect</code> function is used to create the effects. It takes two arguments.  Lets see how each of these arguments are defined.</p>

<p><strong>The first argument is a function which returns an observable.</strong></p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">Action</span> <span class="o">|</span> <span class="nx">unknown</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>Below are the steps, we will follow to create this functionâ€“</p>

<ul>
  <li>
    <p>First of all, we will access the <code class="language-plaintext highlighter-rouge">Actions</code> instance observable.</p>
  </li>
  <li>
    <p>â€¦then we will use pipeable  <a href="https://ngrx.io/api/effects/ofType">ofType</a> operator function.  <code class="language-plaintext highlighter-rouge">ofType</code> operator function takes one or more actions as arguments and filters the Actions stream based on provided arguments.</p>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">actions$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
    <span class="nx">ofType</span><span class="p">(</span><span class="nx">AppActions</span><span class="p">.</span><span class="nx">loadUsers</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>The stream of actions is flattened and mapped to  new observables using a RxJs flattening operators such as <code class="language-plaintext highlighter-rouge">MergeMap, concatMap, exhaustMap</code>.  At this point, the computation or external API calls are performed depending on the task.</p>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">actions$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
     <span class="nx">ofType</span><span class="p">(</span><span class="nx">AppActions</span><span class="p">.</span><span class="nx">loadUsers</span><span class="p">),</span>
     <span class="c1">//flatten the actions</span>
     <span class="nx">mergeMap</span><span class="p">(</span>
     <span class="p">(</span><span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">remoteService</span><span class="p">.</span><span class="nx">users$</span>
<span class="p">)</span>
</code></pre></div>    </div>

    <p><em>We have provide only one action as argument to <code class="language-plaintext highlighter-rouge">ofType</code> operator function. But you could provide multiple actions. In that case, the effect will execute the tasks for any matched Action.</em></p>
  </li>
  <li>
    <p>Finally</p>

    <ul>
      <li>
        <p>If the task is successful, a new action with optional metadata is returned as an observable</p>
      </li>
      <li>
        <p>If an error occurs, an Observable of error is returned.</p>
      </li>
    </ul>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">actions$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
 <span class="err">Â Â Â Â </span><span class="nx">ofType</span><span class="p">(</span><span class="nx">AppActions</span><span class="p">.</span><span class="nx">loadUsers</span><span class="p">),</span>
<span class="err">Â Â Â Â </span> <span class="c1">//flatten the actions</span>
<span class="err">Â Â Â Â </span> <span class="nx">mergeMap</span><span class="p">((</span><span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">remoteService</span><span class="p">.</span><span class="nx">users$</span>
<span class="err">Â Â Â Â Â Â Â Â </span> <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
<span class="err">Â Â Â Â Â Â Â Â Â Â Â Â </span> <span class="c1">//maps the users to addUser action</span>
<span class="err">Â Â Â Â Â Â Â Â Â Â Â Â </span> <span class="nx">map</span><span class="p">(</span><span class="nx">users</span> <span class="o">=&gt;</span> <span class="nx">AppActions</span><span class="p">.</span><span class="nx">addUsers</span><span class="p">({</span> <span class="nx">users</span> <span class="p">})),</span>
<span class="err">Â Â Â Â Â Â Â Â Â Â Â Â </span> <span class="c1">// return Observable&lt;any&gt; to catch error</span>
<span class="err">Â Â Â Â Â Â Â Â Â Â Â Â </span> <span class="nx">catchError</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="err">Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </span> <span class="k">return</span> <span class="k">of</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
<span class="err">Â Â Â Â Â Â Â Â Â Â Â Â </span> <span class="p">})</span>
<span class="err">Â Â Â Â Â Â Â Â </span> <span class="p">)</span>
    <span class="p">);</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>The second argument is the EffectConfig to configure the effect</strong></p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">EffectConfig</span><span class="p">{</span>
   <span class="nl">dispatch</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">;</span>
   <span class="nl">useEffectsErrorHandler</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Dispatch</code>:</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">dipatch:true</code> conveyes that the Â actionÂ emittedÂ byÂ theÂ effectÂ isÂ dispatchedÂ toÂ theÂ store.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">dipatch:false</code> means the effect does not need to return an action.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">useEffectErrorHandler</code> determines if the effect should be resubscribed incase an error occurs.</p>
  </li>
</ul>

<p>Below is the final version <em><code class="language-plaintext highlighter-rouge">loadUsers$</code></em> effect -</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nx">loadUsers$</span> <span class="o">=</span> <span class="nx">createEffect</span><span class="p">(</span>
 <span class="p">()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">action$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
    <span class="nx">ofType</span><span class="p">(</span><span class="nx">AppActions</span><span class="p">.</span><span class="nx">loadUsers</span><span class="p">),</span>
    <span class="nx">mergeMap</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">remoteService</span><span class="p">.</span><span class="nx">users$</span>
      <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
        <span class="nx">map</span><span class="p">(</span><span class="nx">users</span> <span class="o">=&gt;</span> <span class="nx">AppActions</span><span class="p">.</span><span class="nx">addUsers</span><span class="p">({</span> <span class="nx">users</span> <span class="p">})),</span>
        <span class="nx">catchError</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">return</span> <span class="k">of</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
        <span class="p">})</span>
      <span class="p">)),</span>
  <span class="p">));</span>
</code></pre></div></div>

<p><em>Similarly we can create <code class="language-plaintext highlighter-rouge">loadPosts$</code> effect. which is mapped to <code class="language-plaintext highlighter-rouge">loadPosts action</code> and return <code class="language-plaintext highlighter-rouge">addPosts</code> action</em>`</p>

<h3 id="effects-that-require-input-state">Effects that require input state.</h3>

<p>Letâ€™s assume, our app also requires to show notifications upon operation success.</p>

<ul>
  <li>
    <p>We have a <code class="language-plaintext highlighter-rouge">showNofitication(message:string)</code> method which is responsible to show the notifications.  The messages shown by the notification is contextual and hence the message should be passed to the method as argument .</p>
  </li>
  <li>
    <p>We also have an action  <code class="language-plaintext highlighter-rouge">[Notification] operation Success</code> which carries the <code class="language-plaintext highlighter-rouge">message</code> metadata.</p>
  </li>
  <li>
    <p>The effect will access the metadata of the selected action and pass it on to the <code class="language-plaintext highlighter-rouge">showNotification Method</code></p>
  </li>
</ul>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//app.actions.ts</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">operationSuccess</span> <span class="o">=</span> <span class="nx">createAction</span><span class="p">(</span>
 <span class="dl">'</span><span class="s1">[profile] operation success</span><span class="dl">'</span><span class="p">,</span>
 <span class="nx">props</span><span class="o">&lt;</span><span class="p">{</span><span class="na">message</span><span class="p">:</span> <span class="nx">message</span><span class="p">}</span><span class="o">&gt;</span><span class="p">()</span>
<span class="p">);</span>
</code></pre></div></div>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//app.effects.ts</span>

  <span class="nx">operatorSuccessNotify$</span> <span class="o">=</span> <span class="nx">createEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">action$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
    <span class="nx">ofType</span><span class="p">(</span><span class="nx">AppActions</span><span class="p">.</span><span class="nx">operationSuccess</span><span class="p">),</span>
    <span class="nx">mergeMap</span><span class="p">((</span><span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> 
    <span class="err">Â Â Â Â </span><span class="k">of</span><span class="p">(</span>
    <span class="err">Â Â Â Â Â Â Â Â </span><span class="k">this</span><span class="p">.</span><span class="nx">notificationService</span><span class="p">.</span><span class="nx">successNotification</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">message</span><span class="p">))</span>
    <span class="err">Â Â Â Â </span><span class="p">)</span>
  <span class="p">),</span>
    <span class="p">{</span>
      <span class="na">dispatch</span><span class="p">:</span> <span class="kc">false</span>
    <span class="p">}</span>
  <span class="p">);</span>
<span class="p">);</span>
</code></pre></div></div>

<p>Notice:  <code class="language-plaintext highlighter-rouge">dispatch</code> is set to <code class="language-plaintext highlighter-rouge">false</code> for this effect. That means, it does not return any new action.</p>

<p>There could also be scenarios where the lastest state of the application is required in the NgRx Effects. In that case, the state has to be accessed directly using NgRx Selectors and RxJS<code class="language-plaintext highlighter-rouge">withLatestFrom</code>operator function. <code class="language-plaintext highlighter-rouge">withLatestFrom</code> operator function should be used inside a flatening operator to prevent the selector from firing untill the correct action is dispatched.</p>

<p>Lets say, the effect requires latest number of posts, we will use <code class="language-plaintext highlighter-rouge">selectPosts</code> selector.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="p">()</span> <span class="o">=&gt;</span> 
        <span class="k">this</span><span class="p">.</span><span class="nx">action$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
            <span class="nx">ofType</span><span class="p">(</span><span class="nx">AppActions</span><span class="p">.</span><span class="nx">updateSize</span><span class="p">),</span>
            <span class="nx">concatMap</span><span class="p">((</span><span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> 
                    <span class="k">of</span><span class="p">(</span><span class="nx">action</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span>
                    <span class="nx">withLatestFrom</span><span class="p">(</span>
                            <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="nx">fromSelectors</span><span class="p">.</span><span class="nx">selectPosts</span><span class="p">)</span>
                     <span class="p">))</span> 
             <span class="p">),</span>

             <span class="p">....</span>
        <span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>

<h2 id="register-the-effects">Register the effects</h2>

<p>Depending on the requirement, you can either create one Effects service for all application or seperate Effect services for each feature module. That means we can be register Effects in the application module or seperately in feature modules.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">EffectsModule</span><span class="p">.</span><span class="nx">forRoot</span><span class="p">([</span><span class="nx">AppEffects</span><span class="p">]);</span>
<span class="c1">//OR</span>
<span class="nx">EffectsModule</span><span class="p">.</span><span class="nx">forFeature</span><span class="p">([</span><span class="nx">ProfileFeatureEffects</span><span class="p">]);</span>
</code></pre></div></div>
:ET