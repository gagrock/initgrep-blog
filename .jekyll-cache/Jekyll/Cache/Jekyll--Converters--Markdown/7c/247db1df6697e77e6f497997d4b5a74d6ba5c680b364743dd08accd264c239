I"pÌ<p>JavaScript dynamic types are great. However, scaling large JavaScript applications often becomes difficult.</p>

<p>TypeScript is the superset of JavaScript with optional static types and it compiles to JavaScript. It is designed for the development of large applications. It may be used to develop applications for both client-side and server-side.</p>

<p>The static types provided are similar to popular statically typed languages such as <a href="https://docs.oracle.com/javase/8/docs/api/">Java</a>, <a href="https://docs.microsoft.com/en-us/aspnet/web-api/overview/getting-started-with-aspnet-web-api/tutorial-your-first-web-api">C#</a> etc. If you are familiar with any of these languages then you might know how the type checking works during compilation. The static type checks also come with extra lines and lead to verbose coding.</p>

<p>Well, If you are the fan of static types, letâ€™s dig in..</p>

<h4 id="basic-types">Basic Types:</h4>
<p><code class="highlighter-rouge">Boolean</code>, <code class="highlighter-rouge">Number</code>, <code class="highlighter-rouge">String</code>, <code class="highlighter-rouge">Array</code>, <code class="highlighter-rouge">Tuple</code>, <code class="highlighter-rouge">Enum</code>, <code class="highlighter-rouge">Any</code>, <code class="highlighter-rouge">Void</code>, <code class="highlighter-rouge">Null</code> and <code class="highlighter-rouge">Undefined</code>, <code class="highlighter-rouge">Never</code>, <code class="highlighter-rouge">Object</code>
Syntax:</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">let</span> <span class="nx">variableName</span><span class="p">:</span><span class="nx">type</span>
    <span class="c1">//or inline initialization</span>
    <span class="kd">let</span> <span class="nx">variableName</span><span class="p">:</span><span class="nx">type</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</code></pre></div></div>
<p>A few examples below will help you understand the declaration of the variables of various basic types.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//Boolean</span>
    <span class="kd">let</span> <span class="nx">isExpired</span><span class="p">:</span><span class="nb">Boolean</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="c1">//Number:</span>
    <span class="kd">let</span>  <span class="nx">productCount</span><span class="p">:</span><span class="nb">Number</span><span class="p">;</span>
    <span class="c1">//String</span>
    <span class="kd">let</span>  <span class="nx">productName</span><span class="p">:</span><span class="nb">String</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">detone</span><span class="dl">'</span><span class="p">;</span>
    <span class="c1">//Template string can also be used as</span>
    <span class="kd">let</span> <span class="nx">country</span><span class="p">:</span><span class="nb">String</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">China</span><span class="dl">'</span><span class="p">;</span>
    <span class="kd">let</span> <span class="nx">productDetails</span><span class="p">:</span><span class="nb">String</span> <span class="o">=</span> <span class="s2">`Country of origin </span><span class="p">${</span><span class="nx">country</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
    <span class="c1">//Array</span>
    <span class="kd">let</span> <span class="nx">productSizesInInches</span><span class="p">:</span><span class="nx">number</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span><span class="mi">24</span><span class="p">,</span><span class="mi">34</span><span class="p">]</span>
    <span class="c1">//Array can also be written as</span>
    <span class="kd">let</span> <span class="nx">prodcutSizesInInches</span><span class="p">:</span><span class="nb">Array</span><span class="o">&lt;</span><span class="nx">number</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span><span class="mi">24</span><span class="p">,</span><span class="mi">34</span><span class="p">]</span>
</code></pre></div></div>
<p>Â </p>

<h5 id="tuple">Tuple</h5>
<p>Tuple is an array where the types are already known. The types do not need to be same.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="cm">/*declare an tuple which has items as number, number,
     number ,string, and array of numbers*/</span>
    <span class="kd">let</span> <span class="nx">preDefinedTypeTuple</span><span class="p">:[</span><span class="nx">number</span><span class="p">,</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">number</span><span class="p">[]];</span>
    <span class="nx">preDefinedTypeTuple</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="dl">'</span><span class="s1">1</span><span class="dl">'</span><span class="p">,[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]]</span>

    <span class="nx">preDefinedTypeTuple</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="dl">"</span><span class="s2">asd</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">1</span><span class="dl">"</span><span class="p">,[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span> <span class="c1">//error</span>
</code></pre></div></div>
<p>Â </p>
<h5 id="enum">Enum</h5>
<p>Enum is a way of giving names to sets of numeric values. By default, Numeric values start with <strong>0</strong>(Zero). However, it can be preset to any specific value and following values would be an increment of <strong>1</strong>(One). It is also possible to provide manual values to all fields.</p>
<blockquote>
  <p>Name of an enum value can also be looked up by its value</p>
</blockquote>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//Default Declaration:</span>
    <span class="kr">enum</span> <span class="nx">Cities</span> <span class="p">{</span><span class="nx">Berlin</span> <span class="p">,</span> <span class="nx">Beijing</span> <span class="p">,</span> <span class="nx">California</span><span class="p">,</span> <span class="nx">London</span> <span class="p">}</span>
    <span class="c1">//usage:</span>
    <span class="kd">let</span> <span class="nx">c</span><span class="p">:</span><span class="nx">Cities</span> <span class="o">=</span> <span class="nx">Cities</span><span class="p">.</span><span class="nx">Beijing</span><span class="p">;</span> <span class="c1">// value would be 1</span>

    <span class="c1">// Declaration with Initial Preset value:</span>
    <span class="kr">enum</span> <span class="nx">Cities</span> <span class="p">{</span><span class="nx">Berlin</span> <span class="o">=</span><span class="mi">1</span> <span class="p">,</span> <span class="nx">Beijing</span> <span class="p">,</span> <span class="nx">California</span><span class="p">,</span> <span class="nx">London</span> <span class="p">}</span>
    <span class="nx">c</span> <span class="o">=</span> <span class="nx">Cities</span><span class="p">.</span><span class="nx">Beijing</span><span class="p">;</span> <span class="c1">//value would be two</span>

    <span class="c1">// Declaration with manual values:</span>
    <span class="kr">enum</span> <span class="nx">Cities</span> <span class="p">{</span><span class="nx">Berlin</span> <span class="o">=</span><span class="mi">1</span> <span class="p">,</span> <span class="nx">Beijing</span> <span class="o">=</span><span class="mi">10</span> <span class="p">,</span> <span class="nx">California</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="nx">London</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">}</span>
    <span class="nx">c</span> <span class="o">=</span> <span class="nx">Cities</span><span class="p">.</span><span class="nx">Beijing</span><span class="p">;</span> <span class="c1">//value would be 10</span>

    <span class="c1">//find name using the numeric value</span>
    <span class="kd">let</span> <span class="nx">cityName</span><span class="p">:</span><span class="nx">string</span> <span class="o">=</span> <span class="nx">Cities</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span> <span class="c1">//Beijing</span>
</code></pre></div></div>
<p>Â </p>
<h5 id="any">Any</h5>
<p>When the type is unknown or partially known, <code class="highlighter-rouge">Any</code> can be used.
It is a way of opting-out of type checking.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">let</span> <span class="nx">foo</span><span class="p">:</span><span class="nx">any</span> <span class="o">=</span> <span class="mi">14</span><span class="p">;</span> <span class="c1">// May be a number</span>
    <span class="nx">foo</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">bar</span><span class="dl">'</span> <span class="c1">//may be a string</span>
    <span class="nx">foo</span> <span class="o">=</span> <span class="kc">false</span> <span class="c1">// may be a boolean</span>
    <span class="nx">foo</span><span class="p">.</span><span class="nx">callMe</span><span class="p">();</span> <span class="c1">// may be a object with callMe() method</span>
</code></pre></div></div>
<p>Â </p>
<h5 id="void">Void</h5>
<p>Void is absence of having a type. It is mostly used as a return type for the functions which does not return anything. If a variable has type Void, It can only be assigned <code class="highlighter-rouge">Null</code> or <code class="highlighter-rouge">undefined</code>.</p>

<p><strong>Null</strong> and <strong>undefined</strong> are subtypes of all other types and can be assigned in place of any type.</p>

<p>Â </p>
<h5 id="never">Never</h5>
<p>When the type of the value never occurs, It can be represented by <code class="highlighter-rouge">Never</code> such as a function which throws an exception and will never return a value.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">foo</span><span class="p">():</span><span class="nx">never</span><span class="p">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nx">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">error message</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
</code></pre></div></div>
<p>Â </p>
<h5 id="object">Object</h5>
<p>Object is a type that represents the non-primitive type, i.e. any thing that is not <code class="highlighter-rouge">number, string, boolean, symbol, null, or undefined</code>.</p>

<p>Â </p>
<h5 id="type-assertion">Type Assertion</h5>
<p>It is basically typecasting. It is useful when a developer is sure that this particular variable is of a specific type and compiler is not able to infer the type.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// Declare an array of any type</span>
    <span class="kd">let</span> <span class="nx">items</span><span class="p">:</span><span class="nx">any</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">item1</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">item2</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">item3</span><span class="dl">"</span><span class="p">]</span>
    <span class="c1">//cast to an array of string</span>
    <span class="kd">let</span> <span class="nx">itemSize</span><span class="p">:</span><span class="nx">number</span> <span class="o">=</span> <span class="p">(</span><span class="o">&lt;</span><span class="nb">Array</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;&gt;</span><span class="nx">items</span><span class="p">).</span><span class="nx">length</span>

    <span class="kd">let</span> <span class="nx">name</span><span class="p">:</span><span class="nx">any</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Dolce</span><span class="dl">"</span><span class="p">;</span>
    <span class="c1">// cast to a string</span>
    <span class="kd">let</span> <span class="nx">len</span><span class="p">:</span><span class="nx">number</span> <span class="o">=</span> <span class="p">(</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="nx">name</span><span class="p">).</span><span class="nx">length</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="functions">Functions:</h4>
<p>Functions can be declared as named functions or anonymous functions similar to JavaScript. However, TypeScript allows to have the type checking for function parameters and return type. 
Below is the syntax of the function.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cm">/**
   point function takes two arguments of number type and returns a number
  **/</span>
  <span class="c1">//named function</span>
  <span class="kd">function</span> <span class="nx">point</span><span class="p">(</span><span class="nx">x</span><span class="p">:</span><span class="nx">number</span><span class="p">,</span> <span class="nx">y</span><span class="p">:</span><span class="nx">number</span><span class="p">):</span><span class="nx">number</span><span class="p">{</span>
      <span class="k">return</span> <span class="nx">x</span><span class="o">*</span><span class="nx">Y</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="c1">//anonymous function</span>
  <span class="kd">let</span> <span class="nx">point</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">:</span><span class="nx">number</span><span class="p">,</span> <span class="nx">y</span><span class="p">:</span><span class="nx">number</span><span class="p">):</span><span class="nx">number</span><span class="p">{</span>
      <span class="k">return</span> <span class="nx">x</span><span class="o">*</span><span class="nx">Y</span><span class="p">;</span>
  <span class="p">}</span>
</code></pre></div></div>
<p>Function types can also be declared. It consists of <code class="highlighter-rouge">parameters</code> and <code class="highlighter-rouge">return</code> types with return types being separated by fat arrow(<code class="highlighter-rouge">=&gt;</code>). Parameter names do not need to be consistent with the function type. Only the parameter types are checked. Return type declaration is mandatory. If a function does not return anything, return type should be <code class="highlighter-rouge">void</code>,</p>

<p>TypeScript compiler normally infers the type if the type is present on one side of the equation. 
Below is an example of function type declaration and usage.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="cm">/** 
        declare a point as function type having parameters 
        as number type and the return type as number
    **/</span>
    <span class="nx">def</span> <span class="nx">point</span><span class="p">:</span> <span class="p">(</span><span class="nx">x</span><span class="p">:</span><span class="nx">number</span><span class="p">,</span> <span class="nx">y</span><span class="p">:</span><span class="nx">number</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">number</span><span class="p">;</span>
    <span class="nx">point</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">:</span><span class="nx">number</span><span class="p">,</span><span class="nx">y</span><span class="p">:</span><span class="nx">number</span><span class="p">):</span><span class="nx">number</span><span class="p">{</span> <span class="nx">x</span><span class="o">*</span><span class="nx">Y</span> <span class="p">};</span>
    <span class="c1">//type is automatically inferred by compiler</span>
    <span class="nx">point</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span> <span class="nx">x</span><span class="o">*</span><span class="nx">Y</span> <span class="p">};</span>
</code></pre></div></div>
<p>In TypeScript, Every function parameter is required. Although the values could be given as <code class="highlighter-rouge">null</code> or <code class="highlighter-rouge">undefined</code>. But it is mandatory to have equal number of arguments given to a function as the number of parameters function expects.</p>

<p>Â </p>
<h5 id="optional-parameter">Optional Parameter</h5>
<p>They are declared by adding a question mark(<code class="highlighter-rouge">?</code>) to the name of the parameter. Optional parameters must follow the required parameters.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//function type</span>
    <span class="p">(</span><span class="nx">firstName</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">?:</span><span class="nx">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">string</span>
    <span class="c1">//Declaration</span>
    <span class="kd">function</span> <span class="nx">user</span><span class="p">(</span><span class="nx">firstName</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">?:</span> <span class="nx">string</span><span class="p">):</span><span class="nx">string</span><span class="p">{</span>
        <span class="k">return</span> <span class="nx">firstName</span><span class="o">+</span><span class="nx">lastName</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>

<p>Â </p>
<h5 id="default-parameters">Default Parameters</h5>
<p>Default parameters are assigned a value during function declaration. Default parameters following after all the required parameters are considered optional and can be omitted during the function call. As a result, In the function type, default parameters are mentioned similar as optional parameters. During the function call, if the argument corresponding to the default parameter has an <code class="highlighter-rouge">undefined</code> value or the argument is not provided, the default value will be considered. Default parameters can be provided in any order. In case, required parameters follow default parameters, function call should explicitly have <code class="highlighter-rouge">undefined</code> for default parameters.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//function type is similar as option parameter</span>
    <span class="p">(</span><span class="nx">firstName</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">?:</span><span class="nx">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">string</span>
    <span class="c1">//declaration</span>
    <span class="kd">function</span> <span class="nx">User</span><span class="p">(</span><span class="nx">firstName</span><span class="p">:</span><span class="nb">String</span><span class="p">,</span><span class="nx">lastName</span><span class="p">:</span><span class="nb">String</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">dash</span><span class="dl">"</span><span class="p">){</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Name = </span><span class="p">${</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> - </span><span class="p">${</span><span class="nx">lastName</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></div></div>
<blockquote>
  <p>Trailing default parameters and optional parameter can be omitted from the function type.</p>
</blockquote>

<p>Â </p>
<h5 id="rest-parameters">Rest Parameters</h5>
<p>It is similar to <code class="highlighter-rouge">arguments</code> in JavaScript and <code class="highlighter-rouge">varargs</code> in Java.They are represented by preceding ellipsis such as <code class="highlighter-rouge">...restparam</code>. Rest parameters are treated as the boundless number of parameters. Any number of arguments can be passed to it. You can even pass none. The compiler builds up an array of <code class="highlighter-rouge">arguments</code> and can be accessed inside the function with the name following ellipsis.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//return type is inferred as string type here by the compiler</span>
    <span class="kd">function</span> <span class="nx">addStudents</span><span class="p">(...</span><span class="nx">students</span><span class="p">:</span><span class="nx">string</span><span class="p">[]){</span>
        <span class="k">return</span> <span class="nx">students</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="dl">'</span><span class="s1">-</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div></div>
<p>Â </p>
<h5 id="function-overloading">Function Overloading</h5>
<p>Unlike Java or C#, where function overloading consists of multiple declarations of the same function with a different number or type of parameters. In TypeScript, the <code class="highlighter-rouge">overload list</code> is provided. The overload list is the possible number of function variations to be allowed in an overloaded function. The final function declaration contains parameter types and return types of which the overloaded list would make a subset. <a href="https://blog.mariusschulz.com/2016/08/18/function-overloads-in-typescript">Here</a> is a detailed post.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//overload list type include Number and String</span>
    <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">:</span><span class="nx">number</span><span class="p">,</span> <span class="nx">y</span><span class="p">:</span><span class="nx">number</span><span class="p">):</span><span class="nx">number</span><span class="p">;</span>
    <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="nx">y</span><span class="p">:</span><span class="nx">string</span><span class="p">):</span><span class="nx">string</span><span class="p">;</span>

    <span class="c1">//final declaration contains type Any which is superset to all types</span>
    <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">:</span><span class="nx">any</span><span class="p">,</span> <span class="nx">y</span><span class="p">:</span><span class="nx">any</span><span class="p">){</span>
      <span class="k">return</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">x</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">y</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">)</span> <span class="p">?</span> <span class="s2">`</span><span class="p">${</span><span class="nx">x</span><span class="p">}</span><span class="s2">-</span><span class="p">${</span><span class="nx">y</span><span class="p">}</span><span class="s2">`</span> <span class="p">:</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span>
    <span class="p">}</span>

    <span class="c1">//you can also make the final declaration more specific by using union types.</span>
    <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">:</span><span class="nx">number</span><span class="o">|</span><span class="nx">string</span> <span class="p">,</span> <span class="nx">y</span><span class="p">:</span><span class="nx">number</span><span class="o">|</span><span class="nx">string</span><span class="p">):</span><span class="nx">number</span><span class="o">|</span><span class="nx">string</span><span class="p">{</span>
      <span class="k">return</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">x</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">y</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">)</span> <span class="p">?</span> <span class="s2">`</span><span class="p">${</span><span class="nx">x</span><span class="p">}</span><span class="s2">-</span><span class="p">${</span><span class="nx">y</span><span class="p">}</span><span class="s2">`</span> <span class="p">:</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span>
    <span class="p">}</span>

    <span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">star</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">awards</span><span class="dl">"</span><span class="p">);</span>  <span class="c1">//pass</span>
    <span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>  <span class="c1">//pass </span>
    <span class="nx">add</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]);</span> <span class="c1">//fail</span>
</code></pre></div></div>

<h4 id="interfaces">Interfaces:</h4>
<p>The interface represents the shape of the values. It is a way of defining contracts in the code to avoid any type mismatch. Interfaces can be used to specify types of a group of values, function types, index types(arrays) and class types</p>

<p>A simplified way of describing an object would be as following:</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// Specify types for a javaScript object</span>
    <span class="kd">let</span> <span class="nx">user</span><span class="p">:{</span><span class="nl">name</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="nx">age</span><span class="p">:</span><span class="nx">number</span><span class="p">,</span> <span class="nx">height</span><span class="p">:</span><span class="nx">number</span><span class="p">}</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">irshad</span><span class="dl">'</span><span class="p">,</span><span class="na">height</span><span class="p">:</span><span class="mi">198</span><span class="p">,</span><span class="na">age</span><span class="p">:</span><span class="mi">30</span><span class="p">};</span>

    <span class="c1">//user is of the type UserType</span>
    <span class="kd">let</span> <span class="nx">user</span><span class="p">:</span><span class="nx">UserType</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">irshad</span><span class="dl">'</span><span class="p">,</span><span class="na">height</span><span class="p">:</span><span class="mi">198</span><span class="p">,</span><span class="na">agee</span><span class="p">:</span><span class="mi">30</span><span class="p">};</span>
</code></pre></div></div>

<p>Â </p>
<h5 id="interfaces-can-represent-an-object-with-properties">Interfaces can represent an object with properties</h5>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="cm">/*Interface describes an object with properties. 
    Here UserType represents a type of object with memebers such as 
    name(string type), age(number type), height(number type).
     */</span>
    <span class="kr">interface</span> <span class="nx">UserType</span><span class="p">{</span>
      <span class="nl">name</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span>
      <span class="nx">age</span><span class="p">:</span><span class="nx">number</span><span class="p">,</span>
      <span class="nx">height</span><span class="p">:</span><span class="nx">number</span>
    <span class="p">};</span>
    <span class="c1">//user is of the type UserType</span>
    <span class="kd">let</span> <span class="nx">user</span><span class="p">:</span><span class="nx">UserType</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">irshad</span><span class="dl">'</span><span class="p">,</span><span class="na">height</span><span class="p">:</span><span class="mi">198</span><span class="p">,</span><span class="na">agee</span><span class="p">:</span><span class="mi">30</span><span class="p">};</span>

    <span class="c1">//error. location is     not specified in the type</span>
    <span class="kd">let</span> <span class="nx">user</span><span class="p">:</span><span class="nx">UserType</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">irshad</span><span class="dl">'</span><span class="p">,</span><span class="na">height</span><span class="p">:</span><span class="mi">198</span><span class="p">,</span><span class="na">location</span><span class="p">:</span><span class="mf">30.01</span><span class="p">};</span> 
</code></pre></div></div>
<p>The required parameters should exist and types should match. The compiler does not check for the order of parameters. we will discuss the <code class="highlighter-rouge">optional</code> and <code class="highlighter-rouge">readOnly</code> parameters later in the tutorial.</p>

<p>Â </p>
<h5 id="interfaces-can-represent-function-types">Interfaces can represent function types</h5>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//userType interface represents a function type</span>
    <span class="kr">interface</span> <span class="nx">userType</span><span class="p">{</span>
      <span class="c1">//function type is represented by set of parameters and return value  </span>
      <span class="p">(</span><span class="nx">firstName</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="nx">age</span><span class="p">:</span><span class="nx">number</span><span class="p">):</span><span class="nx">string</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="cm">/**username is a userType. Notice the function declaration doesn't 
    contain explicit parameter types or return types. 
    It is due to type inferrence.
    **/</span>
    <span class="kd">let</span> <span class="nx">userName</span><span class="p">:</span><span class="nx">userType</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">first</span><span class="p">,</span><span class="nx">last</span><span class="p">,</span><span class="nx">age</span><span class="p">){</span>
      <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="nx">first</span><span class="p">}</span><span class="s2">  -  </span><span class="p">${</span><span class="nx">last</span><span class="p">}</span><span class="s2">`</span>
    <span class="p">}</span>
    <span class="c1">//provide explicit types for function declaration</span>
    <span class="nx">userName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">first</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span><span class="nx">last</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span><span class="nx">age</span><span class="p">:</span><span class="nx">number</span><span class="p">):</span><span class="nx">string</span><span class="p">{</span>
      <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="nx">first</span><span class="p">}</span><span class="s2">  -  </span><span class="p">${</span><span class="nx">last</span><span class="p">}</span><span class="s2">`</span>
    <span class="p">}</span>

    <span class="nx">userName</span><span class="p">(</span><span class="dl">'</span><span class="s1">irshad</span><span class="dl">'</span><span class="p">,</span><span class="dl">"</span><span class="s2">ahmad</span><span class="dl">"</span><span class="p">,</span> <span class="mi">30</span><span class="p">);</span> <span class="c1">//pass</span>
    <span class="nx">userName</span><span class="p">(</span><span class="dl">'</span><span class="s1">irshad</span><span class="dl">'</span><span class="p">,</span><span class="dl">"</span><span class="s2">ahmad</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">30</span><span class="dl">"</span><span class="p">);</span> <span class="c1">//fail. </span>
</code></pre></div></div>
<p>For the function types,The compiler considers the order in function parameters. It matches types of one parameter at a time. If the types are not specified in function declaration, the contextual typing of TypeScript can infer the types of arguments during the function call.</p>

<p>Â </p>
<h5 id="interfaces-can-represent-indexable-types">Interfaces can represent Indexable types</h5>

<p>Indexable types have <em>index signatures</em> which take a form of <code class="highlighter-rouge">a[10]</code>or <code class="highlighter-rouge">a['ten']</code> and return a value.  A rule of thumb is indexer type and return type of an indexable type will never change i.e if indexer is of type <strong>X</strong> and its return type is <strong>Y</strong>. It will always remain so.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="cm">/** declare dot as an interface for the indexable type with
     *  indexer of type number and return type as string */</span>
    <span class="kr">interface</span> <span class="nx">dot</span><span class="p">{</span>
      <span class="p">[</span><span class="nx">x</span><span class="p">:</span><span class="nx">number</span><span class="p">]:</span><span class="nx">string</span>
    <span class="p">}</span>

    <span class="kd">let</span> <span class="nx">point</span><span class="p">:</span><span class="nx">dot</span> <span class="p">[</span><span class="mi">100</span><span class="p">];</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">string</code> and <code class="highlighter-rouge">number</code> are the supported index types. <em>Number indexes are internally transformed into string types in JavaScript.</em> As a result, it is possible to use both the types together for indexes. However, the return types should either be same or type returned from a numeric indexer must be a subtype of the type returned from the string indexer.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="cm">/** both string and numeric indexer is used and return type is a string in both cases */</span>
    <span class="kr">interface</span> <span class="nx">dashIndexTYpe</span><span class="p">{</span>
      <span class="p">[</span><span class="nx">x</span><span class="p">:</span><span class="nx">number</span><span class="p">]:</span><span class="nx">string</span>
      <span class="p">[</span><span class="nx">x</span><span class="p">:</span><span class="nx">string</span><span class="p">]:</span><span class="nx">string</span>
    <span class="p">}</span>

    <span class="c1">//Not valid as return types are not same</span>
    <span class="kr">interface</span> <span class="nx">dashIndexType</span><span class="p">{</span>
      <span class="p">[</span><span class="nx">x</span><span class="p">:</span><span class="nx">number</span><span class="p">]:</span><span class="nx">string</span>
      <span class="p">[</span><span class="nx">x</span><span class="p">:</span><span class="nx">string</span><span class="p">]:</span><span class="nx">number</span>
    <span class="p">}</span>

    <span class="kd">let</span> <span class="nx">a</span><span class="p">:</span><span class="nx">dashIndexTYpe</span> <span class="o">=</span> <span class="p">{</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">:</span><span class="dl">'</span><span class="s1">100</span><span class="dl">'</span><span class="p">,</span><span class="mi">2</span><span class="p">:</span><span class="dl">'</span><span class="s1">100</span><span class="dl">'</span><span class="p">}</span>
</code></pre></div></div>
<p>An Object oriented example :)</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">class</span> <span class="nx">road</span><span class="p">{</span> <span class="nl">name</span><span class="p">:</span><span class="nx">string</span><span class="p">}</span>
    <span class="c1">//class highway is subtype of class road</span>
    <span class="kd">class</span> <span class="nx">highway</span> <span class="kd">extends</span> <span class="nx">road</span><span class="p">{</span> <span class="nl">line</span><span class="p">:</span><span class="nx">number</span><span class="p">}</span>
    
    <span class="cm">/** valid 
     * numeric indexer type returns the similar datatype as string
     */</span>
    <span class="kr">interface</span> <span class="nx">roadIndexableType</span><span class="p">{</span>
      <span class="p">[</span><span class="nx">x</span><span class="p">:</span><span class="nx">string</span><span class="p">]:</span> <span class="nx">road</span>
      <span class="p">[</span><span class="nx">x</span><span class="p">:</span><span class="nx">number</span><span class="p">]:</span> <span class="nx">road</span>
    <span class="p">}</span>

    <span class="cm">/** valid
     * numeric indexer type returns the subtype 
     * of string indexer return type
     */</span>
    <span class="kr">interface</span> <span class="nx">roadIndexableTypeD</span><span class="p">{</span>
      <span class="p">[</span><span class="nx">x</span><span class="p">:</span><span class="nx">string</span><span class="p">]:</span> <span class="nx">road</span>
      <span class="p">[</span><span class="nx">x</span><span class="p">:</span><span class="nx">number</span><span class="p">]:</span> <span class="nx">highway</span>
    <span class="p">}</span>

    <span class="cm">/**
     * Not Valid
     * Numeric indexer return type is not similar to 
     * or subtype of string indexer return type
     */</span>
    <span class="kr">interface</span> <span class="nx">roadIndexableTypeNV</span><span class="p">{</span>
      <span class="p">[</span><span class="nx">x</span><span class="p">:</span><span class="nx">string</span><span class="p">]:</span> <span class="nx">highway</span>
      <span class="p">[</span><span class="nx">x</span><span class="p">:</span><span class="nx">number</span><span class="p">]:</span> <span class="nx">road</span>
    <span class="p">}</span>

</code></pre></div></div>

<p>Â </p>
<h5 id="classes-implement-interfaces">Classes implement Interfaces</h5>

<p>Interfaces can be implemented by classes just like in <code class="highlighter-rouge">Java</code> or <code class="highlighter-rouge">C#</code></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//Declare a person Interface</span>
    <span class="kr">interface</span> <span class="nx">person</span><span class="p">{</span>
      <span class="nl">name</span><span class="p">:</span><span class="nx">string</span>
      <span class="nx">getAverageScore</span><span class="p">(...</span><span class="nx">scores</span><span class="p">:</span><span class="nx">number</span><span class="p">[]):</span><span class="nx">number</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="c1">// A class implements the interface person and</span>
    <span class="c1">// inherits the methods and properties declared</span>
    <span class="kd">class</span> <span class="nx">BachelorStudents</span> <span class="kr">implements</span> <span class="nx">student</span><span class="p">{</span>
      <span class="kd">constructor</span><span class="p">(){}</span>
      <span class="nl">name</span><span class="p">:</span><span class="nx">string</span><span class="p">;</span>
      <span class="nx">getAverageScore</span><span class="p">(...</span><span class="nx">scores</span><span class="p">){</span>
          <span class="kd">let</span> <span class="nx">avarge</span><span class="p">:</span><span class="nx">number</span><span class="p">;</span>
          <span class="c1">//do some logic</span>

          <span class="k">return</span> <span class="nx">avarge</span><span class="p">;</span>
      <span class="p">}</span>

    <span class="p">}</span>

    <span class="kd">let</span> <span class="nx">bc1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BachelorStudents</span><span class="p">();</span>
</code></pre></div></div>
<p>Â </p>
<h5 id="interfaces-extend-to-interfaces">Interfaces extend to Interfaces</h5>

<p>Interfaces can extend other interfaces and inherit their properties or methods. The class implementing the last interface has to implement methods present in the interfaces to which the current interfaces <code class="highlighter-rouge">extends</code> to.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kr">interface</span> <span class="nx">person</span><span class="p">{</span>
      <span class="nl">name</span><span class="p">:</span><span class="nx">string</span>
    <span class="p">}</span>

    <span class="kr">interface</span> <span class="nx">student</span> <span class="kd">extends</span> <span class="nx">person</span><span class="p">{</span>
      <span class="nx">getAverageScore</span><span class="p">(...</span><span class="nx">scores</span><span class="p">:</span><span class="nx">number</span><span class="p">[]):</span><span class="nx">number</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kd">class</span> <span class="nx">BachelorStudents</span> <span class="kr">implements</span> <span class="nx">student</span><span class="p">{</span>
      <span class="kd">constructor</span><span class="p">(){}</span>
      <span class="nl">name</span><span class="p">:</span><span class="nx">string</span><span class="p">;</span>
      <span class="nx">getAverageScore</span><span class="p">(...</span><span class="nx">scores</span><span class="p">){</span>
          <span class="kd">let</span> <span class="nx">avarge</span><span class="p">:</span><span class="nx">number</span><span class="p">;</span>
          <span class="c1">//do some logic</span>

          <span class="k">return</span> <span class="nx">avarge</span><span class="p">;</span>
      <span class="p">}</span>

    <span class="p">}</span>

    <span class="kd">let</span> <span class="nx">bc1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BachelorStudents</span><span class="p">();</span>
</code></pre></div></div>

<p>Â </p>
<h4 id="hybrid-types">Hybrid Types</h4>
<p>Since JavaScript is dynamic and flexible. It is possible for an interface to represent more than one kind of type at the same time.</p>

<p>An example below describes how an object can behave as a function as well as an object at the same time.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="cm">/** Declare an interface as a composite type with 
        members as a function type and a property */</span>

    <span class="kr">interface</span> <span class="nx">Trip</span><span class="p">{</span>
      <span class="c1">//function type</span>
      <span class="p">(</span><span class="nx">place</span><span class="p">:</span><span class="nx">string</span><span class="p">)</span> 
      <span class="c1">//property distance</span>
      <span class="nx">distance</span><span class="p">:</span><span class="nx">number</span>
    <span class="p">}</span>

    <span class="c1">//function return the object type as counter</span>
    <span class="kd">function</span> <span class="nx">getTrip</span><span class="p">():</span><span class="nx">Trip</span><span class="p">{</span>
      <span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">Trip</span><span class="o">&gt;</span><span class="kd">function</span><span class="p">(</span><span class="nx">place</span><span class="p">:</span><span class="nx">string</span><span class="p">){}</span>
      <span class="nx">c</span><span class="p">.</span><span class="nx">distance</span> <span class="o">=</span> <span class="mi">100</span>
      <span class="k">return</span> <span class="nx">c</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kd">let</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">getTrip</span><span class="p">();</span>
    <span class="nx">app</span><span class="p">(</span><span class="dl">'</span><span class="s1">call function with place argument</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">app</span><span class="p">.</span><span class="nx">distance</span> <span class="o">=</span> <span class="mi">102</span>

</code></pre></div></div>
<p>Â </p>
<h4 id="optional-and-readonly-types">Optional and readonly types</h4>

<p>The properties present in an Interface which may not be required can be declared as optional. An optional property can be declared by appending <code class="highlighter-rouge">?</code> after the name</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kr">interface</span> <span class="nx">Person</span><span class="p">{</span>
      <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span>
      <span class="nx">age</span><span class="p">?:</span> <span class="nx">number</span>
      <span class="nx">phone</span><span class="p">?:</span> <span class="nx">number</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">createUser</span><span class="p">(</span><span class="nx">p</span><span class="p">:</span><span class="nx">Person</span><span class="p">){</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Name: </span><span class="dl">"</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
      <span class="c1">//it is important to validate optional params</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">age</span><span class="p">){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Age: </span><span class="dl">"</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">age</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">phone</span><span class="p">){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">phone: </span><span class="dl">"</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">phone</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>
<p>Readonly properties can only be modified when the object is created. A readonly property is specified by putting <code class="highlighter-rouge">readonly</code> before the name. It is similar as is a <code class="highlighter-rouge">const</code> for a variable. However, both have different usage.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kr">interface</span> <span class="nx">readOnlyPerson</span><span class="p">{</span>
      <span class="nx">readonly</span> <span class="nx">name</span><span class="p">:</span> <span class="nx">string</span>
    <span class="p">}</span>

    <span class="kd">let</span> <span class="nx">person1</span><span class="p">:</span><span class="nx">readOnlyPerson</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span> <span class="p">:</span><span class="dl">"</span><span class="s2">Bolt</span><span class="dl">"</span><span class="p">};</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Name of person1</span><span class="dl">"</span><span class="p">,</span> <span class="nx">person1</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
    <span class="c1">//upadate failure</span>
    <span class="nx">person1</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">usian</span><span class="dl">"</span>
</code></pre></div></div>

:ET