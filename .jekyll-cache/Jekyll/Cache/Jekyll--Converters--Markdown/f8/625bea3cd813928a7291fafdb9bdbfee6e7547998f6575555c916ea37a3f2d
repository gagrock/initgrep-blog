I";q<p>Criteria API is one of the many features provided by JPA to create a programmatic Object graph model for queries. I have written a detailed post about building criteria Queries, Criteria Query Join between entities and using aggregate methods. You can check out the tutorial about <a href="/posts/java/jpa/create-programmatic-queries-using-criteria-api">writing criteria queries in JPA</a>.</p>

<p>To get started, let’s analyze the <code class="highlighter-rouge">selection</code> of a basic  SQL <code class="highlighter-rouge">SELECT</code> query.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    
    <span class="mi">1</span><span class="o">:</span> <span class="n">select</span> <span class="o">*</span> <span class="n">from</span> <span class="no">STUDENT</span><span class="o">;</span>

    <span class="mi">2</span><span class="o">:</span> <span class="n">select</span> <span class="no">ID</span><span class="o">,</span> <span class="no">NAME</span> <span class="n">from</span> <span class="no">STUDENT</span><span class="o">;</span>

    <span class="mi">3</span><span class="o">:</span> <span class="n">select</span> <span class="nf">count</span><span class="o">(</span><span class="no">ID</span><span class="o">)</span> <span class="n">from</span> <span class="no">STUDENT</span><span class="o">;</span>

    <span class="mi">4</span><span class="o">:</span>    <span class="no">SELECT</span> <span class="n">s</span><span class="o">.</span><span class="na">NAME</span><span class="o">,</span> <span class="n">a</span><span class="o">.</span><span class="na">CITY</span><span class="o">,</span> <span class="n">a</span><span class="o">.</span><span class="na">ZIP_CODE</span>
        <span class="no">FROM</span> <span class="no">STUDENT</span> <span class="n">s</span>
        <span class="no">INNER</span> <span class="no">JOIN</span> <span class="no">ADDRESS</span> <span class="n">a</span>
        <span class="no">ON</span> <span class="n">s</span><span class="o">.</span><span class="na">ID</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">STUDENT_ID</span><span class="o">;</span>
</code></pre></div></div>

<ol>
  <li>Query (1) uses the <code class="highlighter-rouge">*</code> wild card to select all the column values from the table.</li>
  <li>Query (2) uses a more specific selection by selecting only the ID and NAME column values from the table.</li>
  <li>Query (3) uses an aggregate function <code class="highlighter-rouge">count</code> in the selection.</li>
  <li>Query (4) selects the columns of different tables by joining the two tables.</li>
</ol>

<p>The purpose of showing the above example is to have a rough idea of how the selection works in the <code class="highlighter-rouge">SQL</code> queries. Criteria Queries in JPA include various methods to select <strong>single entity</strong>, <strong>single value</strong>, <strong>multiple values from same entity or different entities</strong> and <strong>aggregate functions</strong>.</p>

<p> </p>

<p>JPA Criteria API provides the following options for the selection of values.</p>

<ol>
  <li><strong>CriteriaQuery.select</strong> method.</li>
  <li><strong>CriteriaQuery.multiselect</strong> method.</li>
  <li>creating a <strong>CriteriaQuery</strong> which returns a <strong>tuple</strong>.</li>
</ol>

<p> </p>

<p>We will discuss the implementation of each method. The domain model will remain same as in the previous post.</p>

<h3 id="criteriaqueryselect">CriteriaQuery.select</h3>
<p>This method takes one <a href="https://docs.oracle.com/javaee/6/api/javax/persistence/criteria/Selection.html">Selection</a> item as a parameter. The parameter specifies the result returned by the Criteria Query. The <code class="highlighter-rouge">select</code> method can be used to select a <strong>single entity</strong> or a <strong>single value</strong>.</p>

<p>Let’s select a student on the basis of its identifier (<code class="highlighter-rouge">ID column</code>).</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="cm">/** create  a Criteria Builder **/</span>
    <span class="nc">CriteriaBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">getCriteriaBuilder</span><span class="o">();</span>
    <span class="cm">/** create a CriteriaQuery which returns student Objects **/</span>
    <span class="nc">CriteriaQuery</span><span class="o">&lt;</span><span class="nc">Student</span><span class="o">&gt;</span> <span class="n">cq</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="nc">Student</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="cm">/** fetch the Student Entity **/</span>
    <span class="nc">Root</span><span class="o">&lt;</span><span class="nc">Student</span><span class="o">&gt;</span> <span class="n">student</span> <span class="o">=</span> <span class="n">cq</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="nc">Student</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="cm">/** select the Student entity**/</span>
    <span class="n">cq</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">student</span><span class="o">);</span>
    <span class="cm">/** add a restriction to fetch only student with ID= 1003 **/</span>
    <span class="n">cq</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">builder</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="n">student</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"id"</span><span class="o">),</span> <span class="mi">10003L</span><span class="o">));</span>
    <span class="cm">/** fetch the student result **/</span>
    <span class="nc">Student</span> <span class="n">studentResult</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="n">cq</span><span class="o">).</span><span class="na">getSingleResult</span><span class="o">();</span>

</code></pre></div></div>

<p>The above example fetches a student Entity.</p>

<ul>
  <li>We build a Criteria query by calling <code class="highlighter-rouge">CriteriaBuilder.createQuery</code> method.</li>
  <li>The <code class="highlighter-rouge">Root</code> instance returned from the <code class="highlighter-rouge">CriteriaQuery.from</code> method references the type of the entity provided in the parameter. In this case, it is the <code class="highlighter-rouge">Student</code> entity.</li>
  <li>The <code class="highlighter-rouge">select</code> method takes the root as the parameter</li>
</ul>

<p> </p>

<p>In order to return a <strong>single value</strong> from the criteria query for each row, we have to provide a <code class="highlighter-rouge">Path</code> instance which refers to the attribute to be selected.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nc">Path</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">namePath</span> <span class="o">=</span> <span class="n">student</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"name"</span><span class="o">);</span>
    <span class="n">cq</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">namePath</span><span class="o">);</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">Select</code> method accepts the parameter of type <code class="highlighter-rouge">Selection</code>. The <code class="highlighter-rouge">Path</code> interface is a child interface of Selection which makes Path instance an ideal candidate for the parameter.</p>
<blockquote>
  <p><em>In the previous post related to <a href="/posts/java/jpa/create-programmatic-queries-using-criteria-api">writing criteria queries in JPA</a>, I have explained the inheritance tree of various interfaces.</em></p>
</blockquote>

<p> 
 </p>

<p><strong>Aggregate Operation —</strong>
If an aggregate method is used in selection, the return type of the criteria query result would be the same as the return type of the aggregate method. For example, if we use <code class="highlighter-rouge">count</code>, the query type should be <code class="highlighter-rouge">Long</code>.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nc">CriteriaQuery</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">cq</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="nc">Long</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="nc">Root</span><span class="o">&lt;</span><span class="nc">Student</span><span class="o">&gt;</span> <span class="n">root</span> <span class="o">=</span> <span class="n">cq</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="nc">Student</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="n">cq</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">builder</span><span class="o">.</span><span class="na">count</span><span class="o">(</span><span class="n">root</span><span class="o">));</span>
    <span class="nc">Long</span> <span class="n">resultList</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="n">cq</span><span class="o">).</span><span class="na">getSingleResult</span><span class="o">();</span>
</code></pre></div></div>

<p> 
 </p>

<p><strong>Fetching Relationships —</strong>
In case of the relationships such as <code class="highlighter-rouge">OneToMany</code>, <code class="highlighter-rouge">OneToOne</code> or <code class="highlighter-rouge">ManyToMany</code>, the output query results in an implicit <code class="highlighter-rouge">join</code> operation.
I have updated the above query to fetch all the addresses of a given student.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nc">CriteriaQuery</span><span class="o">&lt;</span><span class="nc">Address</span><span class="o">&gt;</span> <span class="n">cq</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="nc">Address</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="nc">Root</span><span class="o">&lt;</span><span class="nc">Student</span><span class="o">&gt;</span> <span class="n">student</span> <span class="o">=</span> <span class="n">cq</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="nc">Student</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="nc">Path</span><span class="o">&lt;</span><span class="nc">Address</span><span class="o">&gt;</span> <span class="n">addressPath</span> <span class="o">=</span> <span class="n">student</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"addresses"</span><span class="o">);</span>
    <span class="n">cq</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">addressPath</span><span class="o">);</span>
    <span class="n">cq</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">builder</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="n">student</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"id"</span><span class="o">),</span> <span class="mi">10003L</span><span class="o">));</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Address</span><span class="o">&gt;</span> <span class="n">resultList</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="n">cq</span><span class="o">).</span><span class="na">getResultList</span><span class="o">();</span>
</code></pre></div></div>

<p>Below is the output query for the reference.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">select</span>
        <span class="n">addresses1_</span><span class="o">.</span><span class="na">id</span> <span class="n">as</span> <span class="n">id1_0_</span><span class="o">,</span>
        <span class="n">addresses1_</span><span class="o">.</span><span class="na">city_code</span> <span class="n">as</span> <span class="n">city_cod2_0_</span><span class="o">,</span>
        <span class="n">addresses1_</span><span class="o">.</span><span class="na">city_lang</span> <span class="n">as</span> <span class="n">city_lan3_0_</span><span class="o">,</span>
        <span class="n">addresses1_</span><span class="o">.</span><span class="na">city_name</span> <span class="n">as</span> <span class="n">city_nam4_0_</span><span class="o">,</span>
        <span class="n">addresses1_</span><span class="o">.</span><span class="na">country</span> <span class="n">as</span> <span class="n">country5_0_</span><span class="o">,</span>
        <span class="n">addresses1_</span><span class="o">.</span><span class="na">house_number</span> <span class="n">as</span> <span class="n">house_nu6_0_</span><span class="o">,</span>
        <span class="n">addresses1_</span><span class="o">.</span><span class="na">street</span> <span class="n">as</span> <span class="n">street7_0_</span><span class="o">,</span>
        <span class="n">addresses1_</span><span class="o">.</span><span class="na">student_id</span> <span class="n">as</span> <span class="n">student_9_0_</span><span class="o">,</span>
        <span class="n">addresses1_</span><span class="o">.</span><span class="na">zip_code</span> <span class="n">as</span> <span class="n">zip_code8_0_</span> 
    <span class="n">from</span>
        <span class="n">student</span> <span class="n">student0_</span> 
    <span class="n">inner</span> <span class="n">join</span>
        <span class="n">address</span> <span class="n">addresses1_</span> 
            <span class="n">on</span> <span class="n">student0_</span><span class="o">.</span><span class="na">id</span><span class="o">=</span><span class="n">addresses1_</span><span class="o">.</span><span class="na">student_id</span> 
    <span class="n">where</span>
        <span class="n">student0_</span><span class="o">.</span><span class="na">id</span><span class="o">=</span><span class="mi">10003</span>

</code></pre></div></div>

<p> 
 </p>

<p>Until now we implemented the criteria query to select an Entity or a single value. However, It is not ideal to fetch a complete entity if only a few values are required. Criteria API provides many ways to accomplish that.</p>

<h3 id="criteriaquerymultiselect">CriteriaQuery.multiselect</h3>
<p>This method takes one or more <a href="https://docs.oracle.com/javaee/6/api/javax/persistence/criteria/Selection.html">Selection</a> items as parameters. The parameters specify the result returned by the Criteria Query. 
The <code class="highlighter-rouge">multiselect</code> method can be used to select a single entity, single or multiple values of the same entity or of different entities.</p>

<p>There are a few things to be noted before we move on to the examples.</p>
<ul>
  <li>
    <p>If the criteria query is of the array type i.e <code class="highlighter-rouge">CriteriaQuery&lt;T[]&gt;</code> where <code class="highlighter-rouge">T</code> represents a data type. The elements of the array will correspond to the arguments of the <code class="highlighter-rouge">multiselect</code> method in the specified order for each row.</p>
  </li>
  <li>
    <p>If the criteria query is of the Type <code class="highlighter-rouge">CriteriaQuery&lt;T&gt;</code> where <code class="highlighter-rouge">T</code> is a user-defined class. The arguments to the <code class="highlighter-rouge">multiselect</code>  method will be passed to one of the constructors of the class T and an object of the type T will be returned for each row. <em>In case the matching constructor is not found, an exception will be thrown</em>.</p>
  </li>
  <li>
    <p>If an only single argument is provided to <code class="highlighter-rouge">multiselect</code> method and no type is mentioned, the instance of the type <code class="highlighter-rouge">Object</code> is returned. 
In case of more than one arguments, an instance of type <code class="highlighter-rouge">Object[]</code> will be instantiated and returned for each row. The elements of the array will correspond to the arguments to the <code class="highlighter-rouge">multiselect</code> method, in the specified order.</p>
  </li>
</ul>

<p>Let’s see some examples —</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nc">CriteriaBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">getCriteriaBuilder</span><span class="o">();</span>
    <span class="nc">CriteriaQuery</span><span class="o">&lt;</span><span class="nc">Student</span><span class="o">&gt;</span> <span class="n">cq</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="nc">Student</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="nc">Root</span><span class="o">&lt;</span><span class="nc">Student</span><span class="o">&gt;</span> <span class="n">root</span> <span class="o">=</span> <span class="n">cq</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="nc">Student</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="n">cq</span><span class="o">.</span><span class="na">multiselect</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"id"</span><span class="o">),</span><span class="n">root</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Student</span><span class="o">&gt;</span> <span class="n">resultList</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="n">cq</span><span class="o">).</span><span class="na">getResultList</span><span class="o">();</span>
</code></pre></div></div>
<p>In the above example, The arguments to <code class="highlighter-rouge">multiselect</code> method expect a constructor from the <code class="highlighter-rouge">Student</code> class. It should have the similar signature as the order of the arguments such as</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">public</span> <span class="nf">Student</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>If the constructor is not present, It will throw an exception.</p>

<p>It might not always be possible to go ahead and add a new constructor in an existing class. To avoid that, we can create the criteria query of the <strong>Array type</strong>.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nc">CriteriaBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">getCriteriaBuilder</span><span class="o">();</span>
    <span class="nc">CriteriaQuery</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">[]&gt;</span> <span class="n">cq</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="nc">Object</span><span class="o">[].</span><span class="na">class</span><span class="o">);</span>
    <span class="nc">Root</span><span class="o">&lt;</span><span class="nc">Student</span><span class="o">&gt;</span> <span class="n">root</span> <span class="o">=</span> <span class="n">cq</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="nc">Student</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="n">cq</span><span class="o">.</span><span class="na">multiselect</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"id"</span><span class="o">),</span><span class="n">root</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">[]&gt;</span> <span class="n">resultList</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="n">cq</span><span class="o">).</span><span class="na">getResultList</span><span class="o">();</span>
</code></pre></div></div>
<p>As explained earlier, each argument would take a specific position in the array, based on the order. In this case, <code class="highlighter-rouge">ID</code> would be the first item in array and <code class="highlighter-rouge">name</code> would be second. let’s print the values returned for each row.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">resultList</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">" result row = {} - {}"</span><span class="o">,</span> <span class="n">s</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span><span class="n">s</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">));</span>
</code></pre></div></div>

<p> 
 </p>

<h3 id="tuple-criteria-queries">Tuple Criteria Queries</h3>

<p>The <a href="https://docs.oracle.com/javaee/7/api/javax/persistence/Tuple.html">Tuple</a> is an interface which represents the key-value pairs of data for each row. The Tuple acts as a container for the data. A typical <code class="highlighter-rouge">Tuple</code> implementation contains</p>
<ul>
  <li>an array of Objects i.e <code class="highlighter-rouge">Object[]</code></li>
  <li>Various <code class="highlighter-rouge">get</code> methods to fetch the values based <strong>Index</strong> or <strong>Alias</strong> of the arguments.</li>
</ul>

<p>Similar to other data types, criteria query can return a list of Tuple objects or a single Tuple object.</p>

<p>The following example shows how to fetch more than one value using a tuple criteria query.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="cm">/** create a tuple Query **/</span>
    <span class="nc">CriteriaQuery</span><span class="o">&lt;</span><span class="nc">Tuple</span><span class="o">&gt;</span> <span class="n">cq</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">createTupleQuery</span><span class="o">();</span>
    <span class="nc">Root</span><span class="o">&lt;</span><span class="nc">Student</span><span class="o">&gt;</span> <span class="n">root</span> <span class="o">=</span> <span class="n">cq</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="nc">Student</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="cm">/** the name of the path also acts as an alias **/</span>
    <span class="nc">Path</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">namePath</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"name"</span><span class="o">);</span>
    <span class="nc">Path</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">idPath</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"id"</span><span class="o">);</span>
    <span class="n">cq</span><span class="o">.</span><span class="na">multiselect</span><span class="o">(</span><span class="n">idPath</span> <span class="o">,</span> <span class="n">namePath</span><span class="o">);</span>
    <span class="cm">/** Query returns list of Tuple objects **/</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Tuple</span><span class="o">&gt;</span> <span class="n">resultList</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="n">cq</span><span class="o">).</span><span class="na">getResultList</span><span class="o">();</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">createTupleQuery</code> method returns a criteria query of the type <code class="highlighter-rouge">Tuple</code>. The result contains either a Tuple object or List of the Objects.  We can fetch the values using either index or the alias.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/** fetch the values from result based on index **/</span>
<span class="n">resultList</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">row</span> <span class="o">-&gt;</span> 
                <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"sdk {} -&gt; {}"</span><span class="o">,</span> <span class="n">row</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">),</span> <span class="n">row</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">));</span>
<span class="cm">/** fetch the values from result based on the alias **/</span>
<span class="n">resultList</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">row</span> <span class="o">-&gt;</span>
                 <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"sdk {} -&gt; {}"</span><span class="o">,</span> <span class="n">row</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">idPath</span><span class="o">),</span> <span class="n">row</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">namePath</span><span class="o">)</span> <span class="o">));</span>
</code></pre></div></div>

:ET