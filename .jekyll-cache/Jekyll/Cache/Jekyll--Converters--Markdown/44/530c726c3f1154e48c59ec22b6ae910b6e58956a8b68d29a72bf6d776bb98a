I"<p>Directives are created using <code class="highlighter-rouge">angular.directive</code> API. It is a similar syntax used to create controllers or services. This API takes a <code class="highlighter-rouge">directive name</code> followed by a factory function which returns a <code class="highlighter-rouge">Directive Definition Object</code>. Directive Definition Object, as the name suggests, contains various options which are used by the <code class="highlighter-rouge">compile service</code>  for adding custom behaviors to DOM elements. 
Below are some of the options :</p>

<ul>
  <li><strong>multiElement</strong>: If set to <code class="highlighter-rouge">true</code>, the compiler will collect DOM nodes between nodes with the attributes directive-name-start and directive-name-end, and group them together as the directive elements. By default, it is set to <code class="highlighter-rouge">false</code>.</li>
  <li><strong>priority</strong>: It is used to sort the directives before they are compiled.</li>
  <li>
    <ul>
      <li><strong>terminal</strong>: Sets the current priority as the last. The included directives in templates are also excluded from the execution order set by their own priority.</li>
    </ul>
  </li>
  <li><strong>scope</strong>: By default, directives scope is set to false and inherit from the parent scope. if set to <code class="highlighter-rouge">true</code>, the child scope is created. If multiple directives on an element request for child scope, only one child scope is created. If the scope is an object <code class="highlighter-rouge">{ ... }</code>, it creates an isolate scope. I will explain it later in the tutorial.</li>
  <li><strong>bindToController</strong>: binds the scope elements directly to the controller.</li>
  <li><strong>controller</strong>: controller constructor function.</li>
  <li><strong>controllerAs</strong>: Alias to the controller</li>
  <li><strong>require</strong>:  Inherit another directive.</li>
  <li><strong>restrict</strong>: specify the type of directive(EACM)</li>
  <li><strong>template/templateUrl</strong>: template view or the URL of it</li>
  <li><strong>transclude</strong>: if set to true, Element content is compiled and made available to the directive as a transclude function.</li>
  <li><strong>compile</strong>: function to compile the directive</li>
  <li><strong>Link</strong>: function to link the scope with the compiled element.</li>
</ul>

<p>Below is an example directive with directive definition object.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">directive</span><span class="p">(</span><span class="dl">'</span><span class="s1">directiveDefApi</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="nx">factory</span><span class="p">(</span><span class="nx">injectables</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">directiveDefinitionObject</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">priority</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="na">template</span><span class="p">:</span> <span class="dl">'</span><span class="s1">&lt;div&gt;hello&lt;/div&gt;</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// or // function(tElement, tAttrs) { ... },</span>
    <span class="c1">// or</span>
    <span class="c1">// templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },</span>
    <span class="na">transclude</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="na">restrict</span><span class="p">:</span> <span class="dl">'</span><span class="s1">A</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">templateNamespace</span><span class="p">:</span> <span class="dl">'</span><span class="s1">html</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">scope</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="na">controller</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$element</span><span class="p">,</span> <span class="nx">$attrs</span><span class="p">,</span> <span class="nx">$transclude</span><span class="p">,</span> <span class="nx">otherInjectables</span><span class="p">)</span> <span class="p">{</span>  <span class="p">},</span>
    <span class="na">controllerAs</span><span class="p">:</span> <span class="dl">'</span><span class="s1">stringIdentifier</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">bindToController</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="na">require</span><span class="p">:</span> <span class="dl">'</span><span class="s1">siblingDirectiveName</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],</span>
    <span class="na">multiElement</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="na">compile</span><span class="p">:</span> <span class="kd">function</span> <span class="nx">compile</span><span class="p">(</span><span class="nx">tElement</span><span class="p">,</span> <span class="nx">tAttrs</span><span class="p">,</span> <span class="nx">transclude</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">{</span>
         <span class="na">pre</span><span class="p">:</span> <span class="kd">function</span> <span class="nx">preLink</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">iElement</span><span class="p">,</span> <span class="nx">iAttrs</span><span class="p">,</span> <span class="nx">controller</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">},</span>
         <span class="na">post</span><span class="p">:</span> <span class="kd">function</span> <span class="nx">postLink</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">iElement</span><span class="p">,</span> <span class="nx">iAttrs</span><span class="p">,</span> <span class="nx">controller</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
      <span class="p">}</span>
      <span class="c1">// or</span>
      <span class="c1">// return function postLink( ... ) { ... }</span>
    <span class="p">},</span>
    <span class="c1">// or</span>
    <span class="c1">// link: {</span>
    <span class="c1">//  pre: function preLink(scope, iElement, iAttrs, controller) { ... },</span>
    <span class="c1">//  post: function postLink(scope, iElement, iAttrs, controller) { ... }</span>
    <span class="c1">// }</span>
    <span class="c1">// or</span>
    <span class="c1">// link: function postLink( ... ) { ... }</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="nx">directiveDefinitionObject</span><span class="p">;</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Each of the options has the desired effect on the functionality of a directive. It is outside the scope of this post to explain each of the options in detail.  It would require quite a real estate and time to elaborate each of them.  Hopefully, I will publish the detailed posts about them soon.</p>
:ET