I"‰å<p>NgRx framework helps to build reactive angular applications.</p>

<h2 id="basic-concepts">Basic Concepts</h2>

<p>RxJs store` provides reactive state management for the angular application. NgRx store is the redux implementation developed specifically for angular applications and provides RxJS observable API.</p>

<p><code class="language-plaintext highlighter-rouge">state</code> is an immutable data structure that is a single source of truth for the whole application.</p>

<p><code class="language-plaintext highlighter-rouge">Actions</code> represent the unique events in the application which may be used to perform state transition or trigger side-effects.</p>

<p><code class="language-plaintext highlighter-rouge">Reducers </code>are pure functions that react to <code class="language-plaintext highlighter-rouge">Actions </code>to perform state transitions.</p>

<p><code class="language-plaintext highlighter-rouge">Selectors </code>are pure functions that select, derive, or compose a slice of the state.</p>

<p><code class="language-plaintext highlighter-rouge">Effects</code> allow  the isolation of side-effects.</p>

<p>Â </p>

<h2 id="prerequisites--">Prerequisites -</h2>

<ul>
  <li>
    <p>you have fair understanding of angular framework.</p>
  </li>
  <li>
    <p>You have a basic understanding of redux architecture.</p>
  </li>
  <li>
    <p>you  have a fair knowledge of <code class="language-plaintext highlighter-rouge">RxJs</code> Observable API and various operators.</p>
  </li>
</ul>

<h2 id="installation">Installation</h2>

<p>If you already have an angular app, you can directly go to <strong>step - 4</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 1) install angular cli</span>
npm <span class="nb">install</span> <span class="nt">-g</span> @angular/cli

<span class="c"># 2) create a demo app</span>
ng new ngrx-angular-demo

<span class="c"># 3) navigate to demo app</span>
<span class="nb">cd </span>ngrx-angular-demo

<span class="c"># 4) install ngrx store</span>
ng add @ngrx/store@latest

<span class="c"># 5) run angular in dev mode</span>
ng serve
</code></pre></div></div>

<p>Â </p>

<p><strong>To begin with</strong>, let us have a look at an example file structure. A structure like this would be helpful to split up each feature of <code class="language-plaintext highlighter-rouge">NgRx </code>state management in your app. I usually replicate the same structure in each feature module.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    â”€â”€store
        |_ app.actions.ts
        |_ app.effects.ts
        |_ app.reducer.ts
        |_ app.selectors.ts
</code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">app.actions.ts</code> file will contain the <code class="language-plaintext highlighter-rouge">NgRX actions</code></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">app.effects.ts </code>file will contain the <code class="language-plaintext highlighter-rouge">NgRx effects</code>.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">app.reducer.ts</code> file will contain the <code class="language-plaintext highlighter-rouge">State</code> design and its initialization. it will also contain reducer function.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">app.selectors.ts</code> will contain the <code class="language-plaintext highlighter-rouge">NgRx selectors</code>.</p>
  </li>
</ul>

<p>Here is the complete <a href="https://github.com/initgrep-post-demos/ngrx-demo/tree/master/src/app/store">project setup</a>.</p>

<h2 id="state">State</h2>

<p>The state represents an immutable object that contains the state of an application. It is read-only, so every state transition will return a new state rather than modifying the existing state. As the application grows, each feature should contain a seperate state which are part of the global app state. As such, application state contains one or more feature states.</p>

<p>The state is similar to <code class="language-plaintext highlighter-rouge">Javascript</code> objects. It contains the feature states as the <code class="language-plaintext highlighter-rouge">key-value</code> pairs <em>where the  <code class="language-plaintext highlighter-rouge">key</code> represents a feature state and the <code class="language-plaintext highlighter-rouge">value </code> is the feature state object.</em></p>

<p>The state related to a feature module is referred to as <code class="language-plaintext highlighter-rouge">feature state</code>.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">State</span><span class="p">{</span>
    <span class="nl">feature_1</span><span class="p">:</span> <span class="nx">FeatureOneState</span><span class="p">,</span>
    <span class="nx">feature_2</span><span class="p">:</span> <span class="nx">FeatureTwoState</span><span class="p">,</span>
    <span class="nx">feature_3</span><span class="p">:</span> <span class="nx">FeatureThreeState</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="design-the-state">Design the State</h3>

<p>Letâ€™s assume, our angular application has many feature modules. One of the feature modules is responsible for userâ€™s profile. The <code class="language-plaintext highlighter-rouge">profile </code>module is responsible for rendering the list of  <code class="language-plaintext highlighter-rouge">users </code>and the related <code class="language-plaintext highlighter-rouge">posts </code>.</p>

<p>To design the state, we can assume that the state required for the profile module should contain <strong>List of users</strong> and <strong>List of posts</strong>.</p>

<p>Letâ€™s call the profile state as <code class="language-plaintext highlighter-rouge">ProfileFeatureState</code>.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/** User modal */</span>
<span class="k">export</span> <span class="kr">interface</span> <span class="nx">User</span> <span class="p">{</span>

  <span class="nl">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">email</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">first_name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">last_name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">avatar</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/** post modal **/</span>
<span class="k">export</span> <span class="kr">interface</span> <span class="nx">Post</span> <span class="p">{</span>
  <span class="nl">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">userId</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">body</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>


<span class="cm">/** the modals should ideally be in their own ts file**/</span>

<span class="k">export</span> <span class="kr">interface</span> <span class="nx">ProfileFeatureState</span> <span class="p">{</span>
  <span class="nl">users</span><span class="p">:</span> <span class="nx">User</span><span class="p">[];</span>
  <span class="nl">posts</span><span class="p">:</span> <span class="nx">Post</span><span class="p">[];</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We defined the type for <code class="language-plaintext highlighter-rouge">User </code>and <code class="language-plaintext highlighter-rouge">Post</code> and also created an interface for <code class="language-plaintext highlighter-rouge">ProfileFeatureState</code>.</p>

<p>Finally, we would add <code class="language-plaintext highlighter-rouge">ProfileFeatureState</code>to applications root state -<code class="language-plaintext highlighter-rouge">AppState</code>. The <code class="language-plaintext highlighter-rouge">profile</code> key represents the <code class="language-plaintext highlighter-rouge">profileFeatureState</code>.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">AppState</span><span class="p">{</span>    
<span class="err">Â Â Â Â </span><span class="nx">profile</span><span class="p">:</span> <span class="nx">UserFeatureState</span><span class="p">,</span>    
<span class="c1">//..other features here</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="initialize-the-state">Initialize the State</h3>

<p>Initially, the state of the application is <code class="language-plaintext highlighter-rouge">null </code>since there would be no data. As such, both the <code class="language-plaintext highlighter-rouge">users array</code> and <code class="language-plaintext highlighter-rouge">posts array</code> would be initialized to <code class="language-plaintext highlighter-rouge">null</code>.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">initialProfileFeatureState</span><span class="p">:</span> <span class="nx">ProfileFeatureState</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">users</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="na">addresses</span><span class="p">:</span> <span class="kc">null</span>
<span class="p">};</span>
</code></pre></div></div>

<p>At this point, <code class="language-plaintext highlighter-rouge">app.reducer.ts</code> file should look like -</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*app.reducer.ts*/</span>

<span class="cm">/** User modal */</span>
<span class="k">export</span> <span class="kr">interface</span> <span class="nx">User</span> <span class="p">{</span>
  <span class="nl">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">email</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">first_name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">last_name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">avatar</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/** Post Modal */</span>

<span class="k">export</span> <span class="kr">interface</span> <span class="nx">Post</span> <span class="p">{</span>
  <span class="nl">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">userId</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">body</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>


<span class="k">export</span> <span class="kr">interface</span> <span class="nx">ProfileFeatureState</span> <span class="p">{</span>
  <span class="nl">users</span><span class="p">:</span> <span class="nx">User</span><span class="p">[];</span>
  <span class="nl">addresses</span><span class="p">:</span> <span class="nx">Address</span><span class="p">[];</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">initialProfileFeatureState</span><span class="p">:</span> <span class="nx">ProfileFeatureState</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">users</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="na">addresses</span><span class="p">:</span> <span class="kc">null</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kr">interface</span> <span class="nx">AppState</span> <span class="p">{</span>
  <span class="nl">profile</span><span class="p">:</span> <span class="nx">ProfileFeatureState</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="actions">Actions:</h2>

<p>NgRx Actions represent events in the application. They may trigger a state transition or  trigger a side-effect in <code class="language-plaintext highlighter-rouge">NgRx Effect</code> services.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Action</span><span class="p">{</span>
    <span class="nl">type</span><span class="p">:</span><span class="kr">string</span>
    <span class="c1">//optional metadata properties</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">Action </code>interface contains a property called <code class="language-plaintext highlighter-rouge">Type</code>. The <code class="language-plaintext highlighter-rouge">Type </code>property <strong>identifies</strong> the action. Actions can also contain optional <code class="language-plaintext highlighter-rouge">metadata</code>.</p>

<p><code class="language-plaintext highlighter-rouge">createAction </code>function is used to create the actions and it returns an <a href="https://ngrx.io/api/store/ActionCreator">ActionCreator</a> function.  <code class="language-plaintext highlighter-rouge">ActionCreator</code> function  when called returns an action of type <code class="language-plaintext highlighter-rouge">TypedAction</code>. Optionally, we can also supply additional metadata using <a href="https://ngrx.io/api/store/props">props</a> function.</p>

<p>Letâ€™s go ahead and create an action for add users to <code class="language-plaintext highlighter-rouge">ProfileFeatureState</code>.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">addUsers</span> <span class="o">=</span> <span class="nx">createAction</span><span class="p">(</span>
 <span class="dl">'</span><span class="s1">[profile] add users</span><span class="dl">'</span><span class="p">,</span>
 <span class="nx">props</span><span class="o">&lt;</span><span class="p">{</span> <span class="na">users</span><span class="p">:</span> <span class="nx">User</span><span class="p">[]</span> <span class="p">}</span><span class="o">&gt;</span><span class="p">()</span>
<span class="p">);</span>
</code></pre></div></div>

<p>Notice the type of addusers action as <code class="language-plaintext highlighter-rouge">[profile] add users</code>. The <code class="language-plaintext highlighter-rouge">[profile]</code> represents the source of action. Also the props contains the array of users as the metadata.</p>

<p>Similarly, we can create an action for adding posts to the feature state.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//file: app.actions.ts</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">addPosts</span> <span class="o">=</span> <span class="nx">createAction</span><span class="p">(</span>
  <span class="dl">'</span><span class="s1">[profile] add posts</span><span class="dl">'</span><span class="p">,</span>
  <span class="nx">props</span><span class="o">&lt;</span><span class="p">{</span> <span class="na">posts</span><span class="p">:</span> <span class="nx">Post</span><span class="p">[]</span> <span class="p">}</span><span class="o">&gt;</span><span class="p">()</span>
<span class="p">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">addUsers</code></strong> action is dispatched to indicate that the users should added to state. It will also contain <code class="language-plaintext highlighter-rouge">user[]</code> as metadata.</p>

<p><em>Similarly the Actions related to posts are dispatched</em></p>

<blockquote>
  <p>Actions represent the events and not the commands or operations .  A single command or operation may generate many types of Actions. For example: An operation which creates a new user would atleast generate Actions for <em>success</em> and <em>failure</em> such as <code class="language-plaintext highlighter-rouge">[profile] user created</code> or <code class="language-plaintext highlighter-rouge">[profile] user creation failed</code> .</p>
</blockquote>

<h2 id="ngrx-reducer--">NgRx Reducer -</h2>

<p>Reducers are <a href="https://en.wikipedia.org/wiki/Pure_function"><strong>pure functions</strong></a> which perform transitions from one state to another state based on the latest action dispatched. The reducer functions do not modify the existing state, rather it returns a new state for every state transition. Hence all the reducer functions perform immutable operations.</p>

<h3 id="createreducer">CreateReducer</h3>

<p><strong>NgRx</strong> provides a <a href="https://ngrx.io/api/store/createReducer">createReducer</a> function to create reducers. It takes <code class="language-plaintext highlighter-rouge">initialState</code> as the first param and <code class="language-plaintext highlighter-rouge">any</code> number of <code class="language-plaintext highlighter-rouge">on</code> functions. The <code class="language-plaintext highlighter-rouge">on</code> function provide association between actions and the state changes.</p>

<p><em>When an action is dispatched, all the reducers receive the action. The <code class="language-plaintext highlighter-rouge">on</code> function mapping determines whether the reducer should handle the action.</em></p>

<p><code class="language-plaintext highlighter-rouge">createReducer</code> function returns an <a href="https://ngrx.io/api/store/ActionReducer">ActionReducer</a> function . ActionReducer function takes an <a href="https://ngrx.io/api/store/Action">Action</a> and a <a href="https://ngrx.io/api/store/State">State</a>  as input, and returns a new computed State.</p>

<p>Letâ€™s go ahead a create reducer which handles transitions for <code class="language-plaintext highlighter-rouge">ProfileFeatureState</code>.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">AppActions</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./app.actions</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">theProfFeatureReducer</span> <span class="o">=</span> <span class="nx">createReducer</span><span class="p">(</span>
  <span class="nx">initialProfileFeatureState</span><span class="p">,</span>
  <span class="nx">on</span><span class="p">(</span><span class="nx">AppActions</span><span class="p">.</span><span class="nx">addUsers</span><span class="p">,</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="p">{</span> <span class="nx">users</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="p">...</span><span class="nx">state</span><span class="p">,</span>
    <span class="na">users</span><span class="p">:</span> <span class="p">[...</span><span class="nx">users</span><span class="p">]</span>
  <span class="p">})),</span>
  <span class="nx">on</span><span class="p">(</span><span class="nx">AppActions</span><span class="p">.</span><span class="nx">addPosts</span><span class="p">,</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="p">{</span> <span class="nx">posts</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="p">...</span><span class="nx">state</span><span class="p">,</span>
    <span class="na">posts</span><span class="p">:</span> <span class="p">[...</span><span class="nx">posts</span><span class="p">]</span>
  <span class="p">})),</span>

<span class="p">);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">createReducer</code> function  maps many actions and returns an <code class="language-plaintext highlighter-rouge">ActionReducer</code> function.</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">addUsers</code> action is <strong>mapped</strong> to a <em>function that creates a new <code class="language-plaintext highlighter-rouge">User</code> array and returns a newly computed state</em>.</p>

    <p>Similarly the <code class="language-plaintext highlighter-rouge">addPosts</code> action is mapped.</p>
  </li>
</ul>

<blockquote>
  <p><em>The [â€¦] <code>spread operator</code> copies the properties of the object and returns a new object. It only performs the shallow copying and does not copy the nested structures. You should always consider a better alternative if you are dealing with a state that contains nested data structures. Libraries like <strong>lodash</strong> provide methods to clone nested structures.</em></p>
</blockquote>

<h3 id="create-actionreducermap">Create ActionReducerMap</h3>

<p><code class="language-plaintext highlighter-rouge">ActionReducerMap</code> provides the mapping as <code class="language-plaintext highlighter-rouge">key-value</code> pairs where the <code class="language-plaintext highlighter-rouge">key</code> represents the feature name as a string and the <code class="language-plaintext highlighter-rouge">value</code> is the <code class="language-plaintext highlighter-rouge">ActionReducer function</code> returned by <code class="language-plaintext highlighter-rouge">createReducer</code> function.</p>

<p>In our case, the <code class="language-plaintext highlighter-rouge">ActionReducerMap</code> will contain <code class="language-plaintext highlighter-rouge">profile</code> as  a key and <code class="language-plaintext highlighter-rouge">value</code> as <code class="language-plaintext highlighter-rouge">theProfFeatureReducer</code>.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**The profileFeatureReducer function is necessary as function calls are not supported in the View Engine AOT compiler. It is no longer required if you use the default Ivy AOT compiler (or JIT)**/</span>

<span class="kd">function</span> <span class="nx">profileFeatureReducer</span>
<span class="p">(</span><span class="nx">state</span><span class="p">:</span> <span class="nx">ProfileFeatureState</span> <span class="o">=</span> <span class="nx">initialState</span><span class="p">,</span> <span class="nx">action</span><span class="p">:</span> <span class="nx">Action</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">theProfFeatureReducer</span><span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">);</span>
<span class="p">}</span>

<span class="cm">/** AppActionReducer Map**/</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">AppActionReducerMap</span><span class="p">:</span> <span class="nx">ActionReducerMap</span><span class="o">&lt;</span><span class="nx">AppState</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">profile</span><span class="p">:</span> <span class="nx">profileFeatureReducer</span>
  <span class="c1">// ... other feature go here</span>

<span class="p">};</span>
</code></pre></div></div>

<p><em>It is not necessary to create an <code class="language-plaintext highlighter-rouge">ActionReducerMap</code>. You can directly provide the mapping  in <code class="language-plaintext highlighter-rouge">StoreModule.forRoot({key: ActionReducer})</code>while registering the reducer in app.module.ts.  You can also separately register the feature state in the feature module. I prefer creating the <code class="language-plaintext highlighter-rouge">ActionReducerMap </code>separately as it provides a better type checking in Typescript.</em></p>

<p>At this point, our <code class="language-plaintext highlighter-rouge">app.reducer.ts</code> file should look like :</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/** app.reducer.ts **/</span>
<span class="k">export</span> <span class="kr">interface</span> <span class="nx">ProfileFeatureState</span> <span class="p">{</span>
  <span class="nl">users</span><span class="p">:</span> <span class="nx">User</span><span class="p">[];</span>
  <span class="nl">posts</span><span class="p">:</span> <span class="nx">Post</span><span class="p">[];</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">initialProfileFeatureState</span><span class="p">:</span> <span class="nx">ProfileFeatureState</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">users</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="na">posts</span><span class="p">:</span> <span class="kc">null</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kr">interface</span> <span class="nx">AppState</span> <span class="p">{</span>
  <span class="nl">profile</span><span class="p">:</span> <span class="nx">ProfileFeatureState</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">theProfFeatureReducer</span> <span class="o">=</span> <span class="nx">createReducer</span><span class="p">(</span>
  <span class="nx">initialProfileFeatureState</span><span class="p">,</span>
  <span class="nx">on</span><span class="p">(</span><span class="nx">AppActions</span><span class="p">.</span><span class="nx">addUsers</span><span class="p">,</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="p">{</span> <span class="nx">users</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="p">...</span><span class="nx">state</span><span class="p">,</span>
    <span class="na">users</span><span class="p">:</span> <span class="p">[...</span><span class="nx">users</span><span class="p">]</span>
  <span class="p">})),</span>
  <span class="nx">on</span><span class="p">(</span><span class="nx">AppActions</span><span class="p">.</span><span class="nx">addPosts</span><span class="p">,</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="p">{</span> <span class="nx">posts</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="p">...</span><span class="nx">state</span><span class="p">,</span>
    <span class="na">posts</span><span class="p">:</span> <span class="p">[...</span><span class="nx">posts</span><span class="p">]</span>
  <span class="p">}))</span>
<span class="p">);</span>


<span class="kd">function</span> <span class="nx">profileFeatureReducer</span><span class="p">(</span><span class="nx">state</span><span class="p">:</span> <span class="nx">ProfileFeatureState</span> <span class="o">=</span> <span class="nx">initialProfileFeatureState</span><span class="p">,</span> <span class="nx">action</span><span class="p">:</span> <span class="nx">Action</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">theProfFeatureReducer</span><span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">AppActionReducerMap</span><span class="p">:</span> <span class="nx">ActionReducerMap</span><span class="o">&lt;</span><span class="nx">AppState</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">profile</span><span class="p">:</span> <span class="nx">profileFeatureReducer</span>
<span class="p">};</span>
</code></pre></div></div>

<h4 id="register-the--state">Register the  State</h4>

<p>Once the reducer is created, It should be registered in the Module .</p>

<p>The state can be registered using one of the two options:</p>

<ul>
  <li>
    <p><strong>Register Root state</strong></p>

    <p>To register the global store in the application</p>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">StoreModule</span><span class="p">.</span><span class="nx">forRoot</span><span class="p">({</span> <span class="nx">AppActionReducerMap</span> <span class="p">})</span>
</code></pre></div>    </div>

    <p><code class="language-plaintext highlighter-rouge">StoreModule.forRoot()</code> takes <code class="language-plaintext highlighter-rouge">ActionReducerMap</code> as an argument. The map contains  <code class="language-plaintext highlighter-rouge">key</code> and <code class="language-plaintext highlighter-rouge">ActionReducer</code> Object returned by <code class="language-plaintext highlighter-rouge">createReducer</code> function.</p>
  </li>
  <li>
    <p><strong>Register each feature state separately -</strong></p>

    <p>Feature states are similar to root states but they represent the state of specific features of an application. Typically, each feature should be registed in its own module.</p>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">StoreModule</span><span class="p">.</span><span class="nx">forFeature</span><span class="p">({</span> <span class="na">profile</span><span class="p">:</span> <span class="nx">profileFeatureReducer</span> <span class="p">})</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>Â Â Â Â Â Â Â </p>

<h2 id="ngrx-selectors--">NgRx Selectors -</h2>

<p>Selectors return a slice of application state. Selectors are pure functions and provideÂ <a href="https://en.wikipedia.org/wiki/Memoization">memoization</a>Â among other features such as type-safety, composition, and portability.</p>

<h3 id="selectors">Selectors</h3>

<p>As you may recall,  <strong><code class="language-plaintext highlighter-rouge">state </code></strong> is a large object and <code class="language-plaintext highlighter-rouge">feature states</code> are stored as  <code class="language-plaintext highlighter-rouge">key-value</code> pairs. The <code class="language-plaintext highlighter-rouge">key </code>to the feature state can be used to obtain the feature state  object like <code class="language-plaintext highlighter-rouge">obj.key</code>.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kr">interface</span> <span class="nx">AppState</span><span class="p">{</span>
    <span class="nl">profile</span><span class="p">:</span> <span class="nx">ProfileFeatureState</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If we have to select the <code class="language-plaintext highlighter-rouge">profileFeatureState</code> , we would do as <code class="language-plaintext highlighter-rouge">AppState.profile</code> and it would return the <code class="language-plaintext highlighter-rouge">profileFeatureState</code>.</p>

<p>Similarly to create a selector function which returns <code class="language-plaintext highlighter-rouge">profileFeatureState</code> from <code class="language-plaintext highlighter-rouge">AppState</code>, we would do like</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">selectProfile</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">state</span><span class="p">:</span><span class="nx">AppState</span><span class="p">){</span> <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nx">profile</span><span class="p">;</span> <span class="p">}</span>
</code></pre></div></div>

<p>or we could use the arrow<code class="language-plaintext highlighter-rouge">(=&gt;)</code> functions to simplify it.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">selectProfile</span> <span class="o">=</span> <span class="p">(</span><span class="nx">state</span><span class="p">:</span><span class="nx">AppState</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">state</span><span class="p">.</span><span class="nx">profile</span><span class="p">;</span>
</code></pre></div></div>

<p>That is the<code class="language-plaintext highlighter-rouge">selectProfile</code> selector.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//inside an angular component or service</span>
<span class="c1">//injec NgRx store instance </span>
<span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">store</span><span class="p">:</span> <span class="nx">Store</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
<span class="nx">profile$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="nx">selectProfile</span><span class="p">);</span>
</code></pre></div></div>

<p>The store instance is injected in constructor and no generic type is mentioned. In this case, TypeScript is able to automatically infer types from the <em>selector function</em>.</p>

<p><strong>There is one more way to get the selected state from store</strong></p>

<p>NgRx <code class="language-plaintext highlighter-rouge">store</code> is an  observable and NgRx provides  <em>pipeable</em> <code class="language-plaintext highlighter-rouge">select</code> operator similar to <code class="language-plaintext highlighter-rouge">RxJs operators</code>.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">profile$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">select</span><span class="p">(</span><span class="nx">fromSelectors</span><span class="p">.</span><span class="nx">selectProfile</span><span class="p">));</span>
</code></pre></div></div>

<p><em>Wait, there is more to selectorsâ€¦.</em></p>

<p><strong><em>Pure functions</em></strong> <em>always return the same value for  same set of arguments. It means, selectors will always return the same piece of state if the argument do not change</em>. <em>Thus we could leverage this property of selectors to provide <a href="https://en.wikipedia.org/wiki/Memoization">memoization</a>.</em></p>

<h3 id="createselector-functions">createSelector functions</h3>

<p>NgRx provides <a href="https://ngrx.io/api/store/createSelector">createSelector</a> function to create selectors. It keeps track of last arguments in which the selector functions were invoked. If the arguments remain same, it simply returns the last result without doing the computation again. This provides performance benefits for selectors where computation of state is expensive.</p>

<p><code class="language-plaintext highlighter-rouge">createSelector</code> function takes up to <strong>8</strong> selector functions and a projector function.  The return value of all the selectors gets passed to projector function.</p>

<blockquote>
  <p><em>Imagine a table structure with rows and columns. <strong>Selector</strong>  function will select a specific <strong>row</strong> and the <strong>projector</strong> function will return the specific <strong>column</strong> from the selected <strong>row</strong>.</em></p>
</blockquote>

<p>We can use createSelector function to return a complete feature state or slice of it using projector function.</p>

<h4 id="select-a-single-piece-of-state">Select a Single piece of state</h4>

<p>Letâ€™s  use <code class="language-plaintext highlighter-rouge">createSelector </code>function to return the <code class="language-plaintext highlighter-rouge">users</code> from <code class="language-plaintext highlighter-rouge">profileFeatureState</code></p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//profile selector.</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">selectProfile</span> <span class="o">=</span> <span class="p">(</span><span class="nx">state</span><span class="p">:</span> <span class="nx">fromApp</span><span class="p">.</span><span class="nx">AppState</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">state</span><span class="p">.</span><span class="nx">profile</span><span class="p">;</span>

<span class="c1">// user selector</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">selectUsers</span> <span class="o">=</span> <span class="nx">createSelector</span><span class="p">(</span>
  <span class="nx">selectProfile</span><span class="p">,</span>
  <span class="c1">//projector function return users from the feature state</span>
  <span class="p">(</span><span class="nx">state</span><span class="p">:</span> <span class="nx">fromApp</span><span class="p">.</span><span class="nx">ProfileFeatureState</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">state</span><span class="p">.</span><span class="nx">users</span>
<span class="p">);</span>

<span class="c1">//return users from store.</span>
<span class="nx">users$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="nx">fromSelectors</span><span class="p">.</span><span class="nx">selectUsers</span><span class="p">);</span>
</code></pre></div></div>

<p>The  <code class="language-plaintext highlighter-rouge">selectProfile</code> selector and a <code class="language-plaintext highlighter-rouge">projector </code>function is used to retrieve all the users in <code class="language-plaintext highlighter-rouge">ProfileFeatureState</code>. Since the arguments will never change, it means the computations will be done only once to get the users unless the <code class="language-plaintext highlighter-rouge">AppState</code> is modified. Hence, the memoization at the place.</p>

<blockquote>
  <p><em><code class="language-plaintext highlighter-rouge">createSelector</code> functions returns a <a href="https://ngrx.io/api/store/MemoizedSelector">MemoizedSelector</a> or  <a href="https://ngrx.io/api/store/MemoizedSelectorWithProps">MemoizedSelectorWithProps</a>. These are  subtypes of <code class="language-plaintext highlighter-rouge">Selector</code> and <code class="language-plaintext highlighter-rouge">SelectorWithProps</code> respectively. They provide <code class="language-plaintext highlighter-rouge">release()</code> method which helps to remove the stored memoized value. A selectors  memoized value  is stored in memory indefinitely. If the value is a large object and is no longer needed. <code class="language-plaintext highlighter-rouge">selector.release()</code> can be used to remove the stored value such as <code class="language-plaintext highlighter-rouge">selectUsers.release()</code></em></p>
</blockquote>

<p>Similar to selecting users, we can also select Posts from <code class="language-plaintext highlighter-rouge">ProfileFeatureState</code>.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//profile selector.</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">selectProfile</span> <span class="o">=</span> <span class="p">(</span><span class="nx">state</span><span class="p">:</span> <span class="nx">fromApp</span><span class="p">.</span><span class="nx">AppState</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">state</span><span class="p">.</span><span class="nx">profile</span><span class="p">;</span>

<span class="c1">// post selector</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">selectPosts</span> <span class="o">=</span> <span class="nx">createSelector</span><span class="p">(</span>
 <span class="nx">selectProfile</span><span class="p">,</span>
 <span class="p">(</span><span class="nx">state</span><span class="p">:</span> <span class="nx">fromApp</span><span class="p">.</span><span class="nx">ProfileFeatureState</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">state</span><span class="p">.</span><span class="nx">posts</span>
 <span class="p">);</span>

<span class="c1">//return posts from store.</span>
<span class="nx">posts$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="nx">fromSelectors</span><span class="p">.</span><span class="nx">selectPosts</span><span class="p">);</span>
</code></pre></div></div>

<h4 id="select-multiple-peices-of-state">Select multiple peices of state</h4>

<p>Now let us assume, we want to select users and its associated posts. This involves two different pieces of the profilefeature state.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">usersWithPosts</span><span class="p">{</span>
    <span class="nl">user</span><span class="p">:</span> <span class="nx">User</span><span class="p">,</span>
    <span class="nx">posts</span><span class="p">:</span> <span class="nx">Post</span><span class="p">[]</span>
<span class="p">}</span> 
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">createSelector</code> function can take up to <strong>8</strong> selector functions which means we can pass <code class="language-plaintext highlighter-rouge">selectUsers</code> and <code class="language-plaintext highlighter-rouge">selectPosts</code> selector in the createSelector function and calculate the associated posts of users.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">selectUsersWithPosts</span> <span class="o">=</span> <span class="nx">createSelector</span><span class="p">(</span>
  <span class="nx">selectUsers</span><span class="p">,</span>
  <span class="nx">selectPosts</span><span class="p">,</span>
  <span class="p">(</span><span class="nx">users</span><span class="p">:</span> <span class="nx">User</span><span class="p">[],</span> <span class="nx">posts</span><span class="p">:</span> <span class="nx">Post</span><span class="p">[])</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">users</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">user</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">{</span> 
      <span class="na">user</span><span class="p">:</span> <span class="p">{</span> <span class="p">...</span><span class="nx">user</span> <span class="p">},</span> 
      <span class="na">posts</span><span class="p">:</span> <span class="nx">posts</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">post</span> <span class="o">=&gt;</span> <span class="nx">post</span><span class="p">.</span><span class="nx">userId</span> <span class="o">===</span> <span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span> <span class="p">};</span>
    <span class="p">});</span>
  <span class="p">});</span>

<span class="c1">//return usersWithPosts Observable</span>
<span class="nx">usersWithPosts$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="nx">fromSelectors</span><span class="p">.</span><span class="nx">selectUsersWithPosts</span><span class="p">);</span>
</code></pre></div></div>

<p><em>Notice how the <code class="language-plaintext highlighter-rouge">selectUsers</code> and <code class="language-plaintext highlighter-rouge">selectPosts</code>  selectors return-values are passed to the projector function.</em></p>

<h4 id="select-state-using-props">Select State using Props</h4>

<p>Selectors can also select a piece of state based on data that is not available in the store.  we can pass <code class="language-plaintext highlighter-rouge">props</code> object to selector function. The <code class="language-plaintext highlighter-rouge">props </code>gets passed through every <code class="language-plaintext highlighter-rouge">selector </code>and <code class="language-plaintext highlighter-rouge">projector </code>function.</p>

<p>To explain it, lets assume, we want to select a user based on its <code class="language-plaintext highlighter-rouge">id</code>.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">selectUserById</span> <span class="o">=</span> <span class="nx">createSelector</span><span class="p">(</span>
  <span class="nx">selectProfile</span><span class="p">,</span>
  <span class="p">(</span><span class="nx">state</span><span class="p">:</span> <span class="nx">fromApp</span><span class="p">.</span><span class="nx">ProfileFeatureState</span><span class="p">,</span> <span class="nx">props</span><span class="p">:</span> <span class="p">{</span> <span class="nl">userId</span><span class="p">:</span> <span class="kr">number</span> <span class="p">})</span> 
  <span class="o">=&gt;</span> <span class="nx">state</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">user</span> <span class="o">=&gt;</span> <span class="nx">user</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">props</span><span class="p">.</span><span class="nx">userId</span><span class="p">)</span>
<span class="p">);</span>

<span class="c1">//return the user with id == 1</span>
<span class="nx">user$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="nx">fromSelectors</span><span class="p">.</span><span class="nx">selectUserById</span><span class="p">,</span> <span class="p">{</span><span class="na">userId</span><span class="p">:</span> <span class="mi">1</span><span class="p">});</span>
</code></pre></div></div>

<p>we passed the <code class="language-plaintext highlighter-rouge">props:{userId:number}</code> object to projector function. The projector function returns the user. While selecting the user from store, we passed an extra object with same type as <code class="language-plaintext highlighter-rouge">props</code> and provided the actual value. In this case, the <code class="language-plaintext highlighter-rouge">userId</code> is equal to <strong>1</strong>.</p>

<h2 id="string-selectors">String Selectors.</h2>

<p>There is also a simple way of creating selectors by providing the key of the feature state as a parameter to <code class="language-plaintext highlighter-rouge">store.select</code> method. In this case, it is mandatory to provide a generic type to <code class="language-plaintext highlighter-rouge">store </code>instance.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">store</span><span class="p">:</span> <span class="nx">Store</span><span class="o">&lt;</span><span class="nx">fromApp</span><span class="p">.</span><span class="nx">AppState</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>

<span class="nx">profile$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="dl">'</span><span class="s1">profile</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p><em>we injected Store instance in constructor of a service or a component and provided<code class="language-plaintext highlighter-rouge">AppState</code> as the  generic type.  After that, we passed the <code class="language-plaintext highlighter-rouge">profile</code> as in the input  to select the <code class="language-plaintext highlighter-rouge">ProfileFeatureState</code></em></p>

<p>The final <code class="language-plaintext highlighter-rouge">app.selectors.ts</code> file looks like -</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//app.selectors.ts</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">fromApp</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./app.reducer</span><span class="dl">'</span><span class="p">;</span>

<span class="cm">/** selectProfile selector */</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">selectProfile</span> <span class="o">=</span> <span class="p">(</span><span class="nx">state</span><span class="p">:</span> <span class="nx">fromApp</span><span class="p">.</span><span class="nx">AppState</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">state</span><span class="p">.</span><span class="nx">profile</span><span class="p">;</span>

<span class="cm">/** selectUser selector */</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">selectUsers</span> <span class="o">=</span> <span class="nx">createSelector</span><span class="p">(</span>
  <span class="nx">selectProfile</span><span class="p">,</span>
  <span class="p">(</span><span class="nx">state</span><span class="p">:</span> <span class="nx">fromApp</span><span class="p">.</span><span class="nx">ProfileFeatureState</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">state</span><span class="p">.</span><span class="nx">users</span>
<span class="p">);</span>

<span class="cm">/**selectUserById Selector */</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">selectUserById</span> <span class="o">=</span> <span class="nx">createSelector</span><span class="p">(</span>
  <span class="nx">selectProfile</span><span class="p">,</span>
  <span class="p">(</span><span class="nx">state</span><span class="p">:</span> <span class="nx">fromApp</span><span class="p">.</span><span class="nx">ProfileFeatureState</span><span class="p">,</span> <span class="nx">props</span><span class="p">:</span> <span class="p">{</span> <span class="nl">userId</span><span class="p">:</span> <span class="kr">number</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">state</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">user</span> <span class="o">=&gt;</span> <span class="nx">user</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">props</span><span class="p">.</span><span class="nx">userId</span><span class="p">)</span>
<span class="p">);</span>

<span class="cm">/**selectPosts selector */</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">selectPosts</span> <span class="o">=</span> <span class="nx">createSelector</span><span class="p">(</span>
  <span class="p">(</span><span class="nx">state</span><span class="p">:</span> <span class="nx">fromApp</span><span class="p">.</span><span class="nx">AppState</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">state</span><span class="p">.</span><span class="nx">profile</span><span class="p">,</span>
  <span class="p">(</span><span class="nx">profState</span><span class="p">:</span> <span class="nx">fromApp</span><span class="p">.</span><span class="nx">ProfileFeatureState</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">profState</span><span class="p">.</span><span class="nx">posts</span><span class="p">,</span>
<span class="p">);</span>

<span class="cm">/**selectUsersWithPosts Selector */</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">selectUsersWithPosts</span> <span class="o">=</span> <span class="nx">createSelector</span><span class="p">(</span>
  <span class="nx">selectUsers</span><span class="p">,</span>
  <span class="nx">selectPosts</span><span class="p">,</span>
  <span class="p">(</span><span class="nx">users</span><span class="p">:</span> <span class="nx">User</span><span class="p">[],</span> <span class="nx">posts</span><span class="p">:</span> <span class="nx">Post</span><span class="p">[])</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">users</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">user</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">{</span> <span class="na">user</span><span class="p">:</span> <span class="p">{</span> <span class="p">...</span><span class="nx">user</span> <span class="p">},</span> <span class="na">posts</span><span class="p">:</span> <span class="nx">posts</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">post</span> <span class="o">=&gt;</span> <span class="nx">post</span><span class="p">.</span><span class="nx">userId</span> <span class="o">===</span> <span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span> <span class="p">};</span>
    <span class="p">});</span>
  <span class="p">});</span>
</code></pre></div></div>

<p>and <code class="language-plaintext highlighter-rouge">app.component.ts</code> -</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//app.component.ts</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">fromSelectors</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./store/app.selectors</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">AppComponent</span><span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">store</span><span class="p">:</span> <span class="nx">Store</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>


  <span class="nx">profile$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="nx">fromSelectors</span><span class="p">.</span><span class="nx">selectProfile</span><span class="p">);</span>

  <span class="nx">users$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="nx">fromSelectors</span><span class="p">.</span><span class="nx">selectUsers</span><span class="p">);</span>

  <span class="nx">usersPosts$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="nx">fromSelectors</span><span class="p">.</span><span class="nx">selectUserWithPosts</span><span class="p">,</span> <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">1</span> <span class="p">});</span>

  <span class="nx">user$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="nx">fromSelectors</span><span class="p">.</span><span class="nx">selectUserById</span><span class="p">,</span> <span class="p">{</span> <span class="na">userId</span><span class="p">:</span> <span class="mi">1</span> <span class="p">});</span>
</code></pre></div></div>

<p>The next important feature of Ngrx State mangement is to handle the<a href="https://rb.gy/qw946i"> side effects</a> of the application. You can check out the post - <a href="">Handling side effects in angular applications using Ngrx</a>.</p>
:ET