I"Xg<p>JavaScript is an object-based language. During the development of an application, it is important to keep the code clean and avoid name-space collisions. In order to keep the code modular, it is important to split each functionality into different chunks of code to separate the concerns. It helps in efficient development, future maintainability, debugging and testing.</p>

<p>Modularity is used in almost any JavaScript libraries/ frameworks such as nodeJs, jQuery etc. Each module is kept in a separate file to have a complete distinguishing file system to traverse and maintain.</p>

<p>Let’s go through the basics of implementation and learn how we can leverage the pattern for the specific needs. For this tutorial, Let’s create some functionalities of a calculator as our demo <code class="highlighter-rouge">finance app</code>.</p>

<p><strong>Modular design pattern in making</strong></p>

<p>The basic way to create different modules is to have separate name-space for a set of functions to avoid name collisions in the application. In JavaScript, we can create a separate object with a set of functions to achieve this.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">var</span> <span class="nx">calc</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="p">;}</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">subtract</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">-</span><span class="nx">b</span><span class="p">;}</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">divide</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">/</span><span class="nx">b</span><span class="p">;}</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">multiply</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="p">;}</span>
 <span class="p">}</span>
</code></pre></div></div>

<p>I have created a constructor function to create the <code class="highlighter-rouge">calc</code> object. This object can be initialized in any part of the application to access the methods. Let us say, we want to use the above <code class="highlighter-rouge">calc</code> in a <code class="highlighter-rouge">finance</code> application</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">financeCalc</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">calc</span><span class="p">();</span>
    <span class="nx">financeCalc</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">100</span> <span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
    <span class="nx">financeCalc</span><span class="p">.</span><span class="nx">subtract</span><span class="p">(</span><span class="mi">400</span> <span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</code></pre></div></div>

<p>let’s assume, we need an extra function which adds data of two different months. For this, we will create another module as <code class="highlighter-rouge">grossModule</code> and keep the new function as part of it.</p>

<p>For further upgrades, we can follow the same process of creating a new object and adding the respective methods.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">grossModule</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">month1Data</span> <span class="p">,</span> <span class="nx">month2Data</span><span class="p">){</span>
           <span class="c1">//    doing some complex calculations</span>
         <span class="k">return</span> <span class="nx">month1Data</span> <span class="o">+</span> <span class="nx">month2Data</span>
      <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// using this module in our finance application </span>
 <span class="kd">var</span> <span class="nx">financeCalc</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">calc</span><span class="p">();</span>
    <span class="nx">financeCalc</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">100</span> <span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
    <span class="nx">financeCalc</span><span class="p">.</span><span class="nx">subtract</span><span class="p">(</span><span class="mi">400</span> <span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
    
 <span class="kd">var</span> <span class="nx">financeGrossModule</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">grossModule</span><span class="p">();</span>
       <span class="nx">financeGrossModule</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">month1</span><span class="p">,</span> <span class="nx">month2</span><span class="p">);</span>
</code></pre></div></div>
<p>we have assigned different name-space for each of the <code class="highlighter-rouge">add</code> methods.
we can use both the types of <code class="highlighter-rouge">add</code> methods in the same application without any challenges.</p>

<p>So far so good. let’s go further ahead and discuss some benefits of implementing the modular pattern in JavaScript.</p>

<p><strong>Encapsulation</strong>:</p>

<p>Encapsulation in its simple terms means, <em>show only the functionality which is necessary and keep the rest of it hidden or private</em>. Encapsulation is a popular concept in the various object-oriented languages such as Java. Similarly, we can achieve it in JavaScript also by keeping in mind a few principles such as:</p>
<ol>
  <li><em>Access the data using methods (getter/setter)</em></li>
  <li><em>Keep the methods private which deal with inner business logic</em></li>
  <li><em>Create simple public API’s</em></li>
</ol>

<p>This is just a specification of how to implement encapsulation and does not refer to any standard document.</p>

<p>Let’s modify the <code class="highlighter-rouge">calc</code> module while considering each of the above features.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">calc</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
       <span class="c1">//private member functions</span>
       <span class="kd">var</span> <span class="nx">roundingLimit</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
       <span class="kd">var</span> <span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="p">;}</span>
       <span class="kd">var</span> <span class="nx">subtract</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">-</span><span class="nx">b</span><span class="p">;}</span>
       <span class="kd">var</span> <span class="nx">divide</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">/</span><span class="nx">b</span><span class="p">;}</span>
       <span class="kd">var</span> <span class="nx">multiply</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="p">;}</span>
       
       <span class="c1">//public methods</span>
       <span class="k">this</span><span class="p">.</span><span class="nx">getRoundingLimit</span> <span class="o">=</span> <span class="p">{</span><span class="k">return</span> <span class="nx">roundingLimit</span><span class="p">;}</span>
       <span class="k">this</span><span class="p">.</span><span class="nx">calculate</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">operation</span> <span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">){</span>
           <span class="k">switch</span><span class="p">(</span><span class="nx">operation</span><span class="p">){</span>
              <span class="k">case</span> <span class="dl">'</span><span class="s1">+</span><span class="dl">'</span><span class="p">:</span> <span class="k">return</span> <span class="nx">add</span><span class="p">(</span><span class="nx">a</span> <span class="p">,</span><span class="nx">b</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
              <span class="k">case</span> <span class="dl">'</span><span class="s1">-</span><span class="dl">'</span> <span class="p">:</span> <span class="k">return</span> <span class="nx">subtract</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
              <span class="k">case</span> <span class="dl">'</span><span class="s1">*</span><span class="dl">'</span> <span class="p">:</span> <span class="k">return</span> <span class="nx">multiply</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
              <span class="k">case</span> <span class="dl">'</span><span class="s1">/</span><span class="dl">'</span> <span class="p">:</span> <span class="k">return</span> <span class="nx">division</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
              <span class="nl">default</span> <span class="p">:</span> <span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">no suitable operation found</span><span class="dl">"</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
           <span class="p">}</span>
       <span class="p">}</span>    
 <span class="p">}</span>
 
</code></pre></div></div>
<p>Our <code class="highlighter-rouge">Calc</code> module now has one public method <code class="highlighter-rouge">calculate</code> which takes the sign of operation and returns the result. Rest of the methods are private and can not be accessed outside the module.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">financeCalc</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">calc</span><span class="p">();</span>
     <span class="nx">financeCalc</span><span class="p">.</span><span class="nx">calculate</span><span class="p">(</span><span class="dl">'</span><span class="s1">+</span><span class="dl">'</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">200</span><span class="p">);</span>
        <span class="nx">financeCalc</span><span class="p">.</span><span class="nx">calculate</span><span class="p">(</span><span class="dl">'</span><span class="s1">-</span><span class="dl">'</span><span class="p">,</span><span class="mi">200</span><span class="p">,</span><span class="mi">100</span><span class="p">);</span>
     <span class="nx">financeCalc</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="mi">200</span><span class="p">);</span> <span class="c1">// is undefined</span>
     <span class="nx">financeCalc</span><span class="p">.</span><span class="nx">roundingLimit</span><span class="p">;</span> <span class="c1">//undefined</span>
     <span class="nx">financeCalc</span><span class="p">.</span><span class="nx">getRoundingLimit</span><span class="p">();</span> <span class="c1">// 2</span>
</code></pre></div></div>

<p><strong>Introduction to IIFEs</strong></p>

<p>Immediately Invoked Function Expressions or IIFE  (pronounced “iffy”) are anonymous JavaScript functions which are invoked immediately. A basic syntax is like:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="c1">// logic here</span>
    <span class="p">})();</span>    
</code></pre></div></div>
<p>In JavaScript, functions can either be created using a normal function declaration such as the named function <strong>or</strong> a function expression</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//named function declaration</span>
<span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span><span class="c1">//some code here}</span>
    
<span class="c1">// function expression</span>
<span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="c1">//some code here }    </span>
</code></pre></div></div>
<p>Expressions always return a value. Since functions are first class objects in JavaScript, If we create a function using function expression, it would return the function object.</p>

<p>Let’s take the below example:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">//declare the function</span>
  <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  
  <span class="p">}</span>
  <span class="c1">//invoke the function</span>
  <span class="nx">foo</span><span class="p">();</span>
</code></pre></div></div>
<p>we can also write the above as</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(){})</span>
  <span class="nx">foo</span><span class="p">();</span>
</code></pre></div></div>
<p>when we wrap the function in a set of braces, it returns the expression value which is a function object. It also means we can invoke the function object returned from the expression. It can be done by merely adding the calling parenthesis.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    <span class="c1">//code here</span>
<span class="p">})();</span>
</code></pre></div></div>

<p><strong>Advantages of using IIFEs to implement a modular pattern</strong></p>

<p>If you noticed above, when we created our <code class="highlighter-rouge">calc</code> module. To use it in our <code class="highlighter-rouge">finance</code> application, we had to manually create the objects. we named it as <code class="highlighter-rouge">financeCalc</code>. The name looks fine but it is not defined by the module and is not a standard. It is possible to give any random name and eventually fall into a name collision. So how can we restrict it and give a standard name?. Well, IIFEs have come to our rescue. If you remember, IIFE is invoked at the time of creation. As a result, we can bet, we will always have one instance in our application with a standard object returned by the module itself.</p>

<p>Let’s assume, our <code class="highlighter-rouge">calc</code> module is present in a seperate file named as <code class="highlighter-rouge">calc.js</code></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//calc.js</span>
<span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
       <span class="c1">//private member functions</span>
       <span class="kd">var</span> <span class="nx">roundingLimit</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
       <span class="kd">var</span> <span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="p">;}</span>
       <span class="kd">var</span> <span class="nx">subtract</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">-</span><span class="nx">b</span><span class="p">;}</span>
       <span class="kd">var</span> <span class="nx">divide</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">/</span><span class="nx">b</span><span class="p">;}</span>
       <span class="kd">var</span> <span class="nx">multiply</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="p">;}</span>
       <span class="kd">var</span> <span class="nx">getRoundingLimit</span> <span class="o">=</span> <span class="p">{</span><span class="k">return</span> <span class="nx">roundingLimit</span><span class="p">;}</span>
       <span class="kd">var</span> <span class="nx">calculate</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">operation</span> <span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">){</span>
           <span class="k">switch</span><span class="p">(</span><span class="nx">operation</span><span class="p">){</span>
              <span class="k">case</span> <span class="dl">'</span><span class="s1">+</span><span class="dl">'</span><span class="p">:</span> <span class="k">return</span> <span class="nx">add</span><span class="p">(</span><span class="nx">a</span> <span class="p">,</span><span class="nx">b</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
              <span class="k">case</span> <span class="dl">'</span><span class="s1">-</span><span class="dl">'</span> <span class="p">:</span> <span class="k">return</span> <span class="nx">subtract</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
              <span class="k">case</span> <span class="dl">'</span><span class="s1">*</span><span class="dl">'</span> <span class="p">:</span> <span class="k">return</span> <span class="nx">multiply</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
              <span class="k">case</span> <span class="dl">'</span><span class="s1">/</span><span class="dl">'</span> <span class="p">:</span> <span class="k">return</span> <span class="nx">division</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
              <span class="nl">default</span> <span class="p">:</span> <span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">no suitable operation found</span><span class="dl">"</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
           <span class="p">}</span>
       <span class="p">}</span> 
       
       <span class="c1">//return the public resources with a standard object name-space</span>
       <span class="k">return</span> <span class="nx">Calculator</span> <span class="o">=</span> <span class="p">{</span>
               <span class="c1">//public methods</span>
            <span class="c1">//Note: we can keep different names to the methods</span>
             <span class="na">getRoundingLimit</span> <span class="p">:</span> <span class="nx">getRoundingLimit</span><span class="p">,</span>
             <span class="na">calculate</span> <span class="p">:</span> <span class="nx">calculate</span>
       <span class="p">}</span>
       
 <span class="p">})();</span>
 
</code></pre></div></div>
<p>We can import it by adding a <code class="highlighter-rouge">script</code> tag in our index html file or using any other module loading libraries. I will explain the various ways of loading modules by the end of this tutorial.</p>

<p>After importing the <code class="highlighter-rouge">calc.js</code> in our <code class="highlighter-rouge">financeApp</code>. Below is our demo <code class="highlighter-rouge">financeApp.js</code>. In our <code class="highlighter-rouge">financeApp.html</code>, we have added the <code class="highlighter-rouge">calc.js</code>. Once the Html is loaded, <code class="highlighter-rouge">calc.js</code> is also loaded and the IIFE is invoked. Thus, we will have the <code class="highlighter-rouge">Calculator</code> object available at the load time including the public methods present in the <code class="highlighter-rouge">Calculator</code>.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;script </span><span class="na">src =</span><span class="s">'calc.js'</span> <span class="nt">/&gt;</span> 
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
 <span class="c1">// financeApp.js</span>
 <span class="nx">Calculator</span><span class="p">.</span><span class="nx">calculate</span><span class="p">(</span><span class="dl">'</span><span class="s1">+</span><span class="dl">'</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">200</span><span class="p">);</span>
 <span class="nx">Calculator</span><span class="p">.</span><span class="nx">calculate</span><span class="p">(</span><span class="dl">'</span><span class="s1">-</span><span class="dl">'</span><span class="p">,</span><span class="mi">200</span><span class="p">,</span><span class="mi">100</span><span class="p">);</span>
 <span class="nx">Calculator</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="mi">200</span><span class="p">);</span> <span class="c1">// is undefined</span>
 <span class="nx">Calculator</span><span class="p">.</span><span class="nx">roundingLimit</span><span class="p">;</span> <span class="c1">//undefined</span>
 <span class="nx">Calculator</span><span class="p">.</span><span class="nx">getRoundingLimit</span><span class="p">();</span> <span class="c1">// 2</span>
</code></pre></div></div>

<p>By now, I hope it is clear, how can we implement the modular design pattern in JavaScript applications.</p>

<p>There are numerous libraries available today, which help to achieve the modular design pattern. Following are the few popular methods which are implemented:</p>

<ol>
  <li><a href="https://github.com/amdjs/amdjs-api/blob/master/AMD.md">AMD <em>define</em> and *require * statement.</a></li>
  <li><a href="https://nodejs.org/docs/latest/api/modules.html"> CommonJS <em>require()</em> statement as implemented in nodeJs</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">  ES2015 <em>import</em> statement.</a></li>
</ol>

<p>You can check out the documentation for implementing each one of them. All of these libraries have various benefits such as lazy loading, asynchronous module loading, using modules in a non-html application etc.</p>

:ET