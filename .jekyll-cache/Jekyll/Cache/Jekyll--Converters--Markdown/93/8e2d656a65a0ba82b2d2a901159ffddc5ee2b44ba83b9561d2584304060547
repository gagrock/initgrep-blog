I"¿A<p>If you are reading this tutorial, you are probably one of the developers out there trying to figure out how to create a Microsoft office add-in using Angular CLI.</p>

<p>Microsoft provides the complete process for creating add-ins using angular through a yeoman generator for VS Code editor. This method works fine but it uses the manual webpack config with angular. I also faced  issues such as:</p>

<ul>
  <li><strong>not able to use template-url in  angular components</strong></li>
  <li><strong>no support for CSS files for each angular components</strong></li>
</ul>

<p>The goal of this tutorial is to demonstrate a way of creating a project structure using angualar@8.0.0 CLI, configure it and make it ready for developing office add-ins.</p>

<p><em>Please note, It still does not support the <code class="highlighter-rouge">office-addin-debugger</code> plugin provided by Microsoft. I have added it as an npm dev-dependency here and I am still trying to figure how to make it work. But you can always debug the add-in on the web app such as outlook web.</em></p>

<blockquote>
  <p>I assume you have <code class="highlighter-rouge">node</code> and <code class="highlighter-rouge">npm</code> already installed</p>
</blockquote>

<p>Â </p>

<p><strong>Let us begin â€“</strong>
Â </p>
<h2 id="generate-office-add-in-angular-app-using-yeoman-generator">Generate Office add-in angular app using yeoman generator</h2>

<p>Office <a href="https://docs.microsoft.com/en-us/outlook/add-ins/quick-start?tabs=visual-studio-code">official docs</a> have provided detailed steps. I will only provide concise steps.</p>

<ul>
  <li>Run the following command in the command line. It will install the office Yeoman generator.
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    npm install -g yo generator-office
</code></pre></div>    </div>
  </li>
  <li>Generate the office adding angular project structure using the below command.
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    yo office --skip-install
</code></pre></div>    </div>
    <p>The above command will provide interactive input. Choose the below options</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```js
   Choose a project type: (Use arrow keys) 
   // choose (2) Office Add-in Task Pane project using Angular framework

   Choose a script type: (Use arrow keys)
   // choose (1) Typescript
    
   What do you want to name your add-in? (My Office Add-in) 
   //Give any name you want. for this tutorial, I would keep demo-addin

   Which Office client application would you like to support? 
   //choose (3) Outlook

```
</code></pre></div>    </div>

    <p>Notice <code class="highlighter-rouge">--skip-install</code> argument. Well, We donâ€™t want <code class="highlighter-rouge">npm</code> to install all the dependencies here. We would only need <code class="highlighter-rouge">manfiest.xml</code> file and some of the Microsoft office dependencies from package.json.</p>
  </li>
</ul>

<p>Our outlook addin project structure is done using yeomen generator. Below is the structure of the generated project.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    .
    â”œâ”€â”€ assets
    â”‚Â Â  â”œâ”€â”€ icon-16.png
    â”‚Â Â  â”œâ”€â”€ icon-32.png
    â”‚Â Â  â”œâ”€â”€ icon-80.png
    â”‚Â Â  â””â”€â”€ logo-filled.png
    â”œâ”€â”€ CONTRIBUTING.md
    â”œâ”€â”€ LICENSE
    â”œâ”€â”€ manifest.xml
    â”œâ”€â”€ package.json
    â”œâ”€â”€ package-lock.json
    â”œâ”€â”€ README.md
    â”œâ”€â”€ src
    â”‚Â Â  â”œâ”€â”€ commands
    â”‚Â Â  â””â”€â”€ taskpane
    â”œâ”€â”€ tsconfig.json
    â””â”€â”€ webpack.config.js

</code></pre></div></div>

<h2 id="creating-an-angular-application-using-angular-cli">Creating an angular application using Angular CLI</h2>

<ul>
  <li>
    <p>Install the Angular CLI</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  npm install -g @angular/cli
</code></pre></div>    </div>
  </li>
  <li>
    <p>Generate an angular app</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  ng new demo-angular-addin
</code></pre></div>    </div>
  </li>
  <li>
    <p>Run <code class="highlighter-rouge">ng serve</code> to make sure the app is working</p>
  </li>
</ul>

<p>The structure of our angular app would look like below:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      .
      â”œâ”€â”€ angular.json
      â”œâ”€â”€ e2e
      â”œâ”€â”€ node_modules
      â”œâ”€â”€ package.json
      â”œâ”€â”€ package-lock.json
      â”œâ”€â”€ README.md
      â”œâ”€â”€ src
      â”œâ”€â”€ tsconfig.json
      â””â”€â”€ tslint.json


</code></pre></div></div>

<h2 id="copy-the-addin-manifest-to-the-angular-application">Copy the addin manifest to the angular application</h2>

<p>Copy the <code class="highlighter-rouge">manifest.xml</code> from demo-addin which we generated using yeomen generator and paste it in the root folder of the angular app.</p>

<h2 id="change-the-angular-application-default-port-number">Change the angular application default port number</h2>

<p>Notice that the <code class="highlighter-rouge">manifest.xml</code> has all the mappings for port 3000 such as <code class="highlighter-rouge">localhost:3000</code>. Also, the angular application default port is 4200. We either have to change the port in manifest or change angular server port. Either way, it should work.</p>

<p>Let us change the default port(4200) of the angular app to 3000. Open <code class="highlighter-rouge">angular.json</code> file and look for <code class="highlighter-rouge">server</code> key and changed the default port. Below is an example.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
 <span class="dl">"</span><span class="s2">serve</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
     <span class="dl">"</span><span class="s2">builder</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">@angular-devkit/build-angular:dev-server</span><span class="dl">"</span><span class="p">,</span>
     <span class="dl">"</span><span class="s2">options</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
         <span class="dl">"</span><span class="s2">browserTarget</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">demo-angular-addin:build</span><span class="dl">"</span><span class="p">,</span>
         <span class="dl">"</span><span class="s2">port</span><span class="dl">"</span><span class="p">:</span> <span class="mi">3000</span>
    <span class="p">},</span>
    <span class="dl">"</span><span class="s2">configurations</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="dl">"</span><span class="s2">production</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">browserTarget</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">demo-angular-addin:build:production</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">port</span><span class="dl">"</span><span class="p">:</span> <span class="mi">3000</span>
                <span class="p">}</span>
    <span class="p">}</span>
   <span class="p">},</span>
</code></pre></div></div>

<p>Run <code class="highlighter-rouge">ng-serve</code> to validate the port.</p>

<h2 id="copy-the-default-icons-from-generated-office-addin-to-angular-app">Copy the default icons from generated office addin to angular app</h2>

<p>The default icons provided are configured in addin manifest. These icons will be shown when the add-in is loaded.</p>

<p>If both the projects are in the same folder, use the below command or do it manually.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  cp -r demo-addin/assets/* demo-angular-addin/src/assets/
</code></pre></div></div>

<h2 id="update-the-manifest-mapping--replace-with-indexhtml-page">Update the manifest mapping â€“ replace with index.html page</h2>

<p>In the <code class="highlighter-rouge">manifest.xml </code>, for each occurrence of <code class="highlighter-rouge">taskpane.url</code> or any other locations where the URL resembles like <code class="highlighter-rouge">https://localhost:3000/taskpane.html</code>, update <strong>taskpane.html</strong> to <strong>index.html</strong>. You can also remove the taskpane.html and only keep host: port (localhost:3000) only.</p>

<h2 id="configure-ssl-for-the-angular-application">Configure SSL for the angular application</h2>

<p>It is mandatory for Microsoft Office add-ins to be served over <code class="highlighter-rouge">https</code> connection. We need to generate an SSL certificate and key and configure our angular application to serve over <code class="highlighter-rouge">https</code>.</p>

<p>Go to this tutorial titled  <a href="https://medium.com/@rubenvermeulen/running-angular-cli-over-https-with-a-trusted-certificate-4a0d5f92747a">Running Angular CLI over HTTPS with a Trusted Certificate</a>. It has all the steps to configure SSL in an angular application.</p>

<p>If you still face any issues, try to install the certificate by choosing <code class="highlighter-rouge">local machine</code>.
 and use the SSL options directly in the terminal.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  ng serve --ssl true --ssl-cert "ssl/server.crt" --ssl-key "ssl/server.key"
</code></pre></div></div>

<p>You can also configure the same command in <code class="highlighter-rouge">package.json</code> inside scripts â€“ such as :</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"start-ssl" : "ng serve --ssl true --ssl-cert \"ssl/server.crt\" --ssl-key \"ssl/server.key\""
</code></pre></div></div>

<h2 id="change-the-typescript-compiler-target-type-to-es5-instead-of-es2015">Change the Typescript compiler target type to es5 instead of es2015</h2>

<p>While I was testing the Outlook addin for the desktop app, it did not load angular components. However, It was working fine in the outlook web app. I initially posted a <a href="https://stackoverflow.com/questions/56600059/microsoft-office-addin-for-outlook-does-not-load-on-outlook-desktop-app">stackOverFlow question</a>. After thorough debugging, I was able to figure out that Outlook desktop app does not support <code class="highlighter-rouge">es2015</code> yet.</p>

<p>Letâ€™s update <code class="highlighter-rouge">tsconfig.app.json</code> and add the new target under <code class="highlighter-rouge">compilerOptions</code>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="dl">"</span><span class="s2">target</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">es5</span><span class="dl">"</span>
</code></pre></div></div>

<p>Â </p>

<p>Â </p>

<h2 id="add-the-missing-dependencies-and-dev-dependencies-using-npm">Add the missing dependencies and dev-dependencies using npm</h2>

<h5 id="npm-dependencies">npm dependencies</h5>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  npm install --save @microsoft/office-js @microsoft/office-js-helpers@^1.0.1 office-ui-fabric-js@^1.3.0
</code></pre></div></div>

<p>I have added <code class="highlighter-rouge">office-js</code> also as an npm dependency. However, <code class="highlighter-rouge">office js</code> is not a valid es6 module and it can not be used as such.
We still need to load it using script tags from CDN. We will get to it later in the tutorial.
You can also keep track of this issue <a href="https://github.com/Microsoft/TypeScript/issues/11420">here</a>. If it is updated as an es6 module in the future, you can directly use it by importing in components rather loading it from CDN.</p>

<h5 id="npm-devdependencies">npm devdependencies</h5>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  npm install --save-dev @types/office-js@^1.0.1 @types/office-runtime@^1.0.7 office-addin-debugging@^2.1.13 office-addin-dev-certs@^1.0.1 office-toolbox@^0.1.1
</code></pre></div></div>

<h5 id="add-the-missing-types">Add the missing types</h5>

<p>During compilation, Typescript compiler is going to complain about missing types. Since we will be using Microsoft Office APIs during development, we will need to add office-js to types.</p>

<p>Update the <code class="highlighter-rouge">tsconfig.app.json</code> and add <code class="highlighter-rouge">office-js</code> under the <code class="highlighter-rouge">types</code> array.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="dl">"</span><span class="s2">types</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
      <span class="dl">"</span><span class="s2">office-js</span><span class="dl">"</span>
   <span class="p">]</span>
</code></pre></div></div>

<h2 id="copy-the-script-from-taskpanehtml-to-indexhtml">Copy the script from taskpane.html to index.html</h2>

<p>As mentioned earlier, Office-js has to be added from CDN. Along with it, if you intend to use office <code class="highlighter-rouge">fabric-ui</code> for developing the addin user interface, include the fabric libraries from CDN.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
   <span class="c">&lt;!-- Office JavaScript API --&gt;</span>
   <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

   <span class="c">&lt;!-- For more information on Office UI Fabric, visit https://developer.microsoft.com/fabric. --&gt;</span>
   <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-js/1.4.0/css/fabric.min.css"</span> <span class="nt">/&gt;</span>
   <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-js/1.4.0/css/fabric.components.min.css"</span> <span class="nt">/&gt;</span>

   <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-js/1.4.0/js/fabric.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

</code></pre></div></div>

<h2 id="bootstrap-the-angular-application-inside-the-officeinitialize-function">Bootstrap the angular application inside the <code class="highlighter-rouge">Office.initialize</code> function.</h2>

<p><code class="highlighter-rouge">Office.initialize</code> makes sure the addin is loaded after the Office application has completely loaded.</p>

<p>letâ€™s update the <code class="highlighter-rouge">main.ts</code> file by wrapping the bootstrap code inside the <code class="highlighter-rouge">initialize</code> function.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
   <span class="nx">Office</span><span class="p">.</span><span class="nx">initialize</span> <span class="o">=</span> <span class="nx">reason</span> <span class="o">=&gt;</span><span class="p">{</span>
       <span class="nx">platformBrowserDynamic</span><span class="p">().</span><span class="nx">bootstrapModule</span><span class="p">(</span><span class="nx">AppModule</span><span class="p">)</span>
                 <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
   <span class="p">};</span>
</code></pre></div></div>

<p>The only thing left now is to side-load our Microsoft Outlook addin. You can find it in official documentation <a href="https://docs.microsoft.com/en-us/office/dev/add-ins/testing/create-a-network-shared-folder-catalog-for-task-pane-and-content-add-ins">here</a>.</p>
:ET